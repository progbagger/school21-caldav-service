// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

func (s *Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [2]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/v1/"
			origElem := elem
			if l := len("/v1/"); len(elem) >= l && elem[0:l] == "/v1/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'c': // Prefix: "c"
				origElem := elem
				if l := len("c"); len(elem) >= l && elem[0:l] == "c" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "ampuses"
					origElem := elem
					if l := len("ampuses"); len(elem) >= l && elem[0:l] == "ampuses" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetCampusesRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "campusId"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'c': // Prefix: "c"
								origElem := elem
								if l := len("c"); len(elem) >= l && elem[0:l] == "c" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'l': // Prefix: "lusters"
									origElem := elem
									if l := len("lusters"); len(elem) >= l && elem[0:l] == "lusters" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGetClustersByCampusRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

									elem = origElem
								case 'o': // Prefix: "oalitions"
									origElem := elem
									if l := len("oalitions"); len(elem) >= l && elem[0:l] == "oalitions" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGetCoalitionsByCampusRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							case 'p': // Prefix: "participants"
								origElem := elem
								if l := len("participants"); len(elem) >= l && elem[0:l] == "participants" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetParticipantsByCampusIdRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 'l': // Prefix: "lusters/"
					origElem := elem
					if l := len("lusters/"); len(elem) >= l && elem[0:l] == "lusters/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "clusterId"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '/': // Prefix: "/map"
						origElem := elem
						if l := len("/map"); len(elem) >= l && elem[0:l] == "/map" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetParticipantsByCoalitionId1Request([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				case 'o': // Prefix: "o"
					origElem := elem
					if l := len("o"); len(elem) >= l && elem[0:l] == "o" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'a': // Prefix: "alitions/"
						origElem := elem
						if l := len("alitions/"); len(elem) >= l && elem[0:l] == "alitions/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "coalitionId"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case '/': // Prefix: "/participants"
							origElem := elem
							if l := len("/participants"); len(elem) >= l && elem[0:l] == "/participants" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetParticipantsByCoalitionIdRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					case 'u': // Prefix: "urses/"
						origElem := elem
						if l := len("urses/"); len(elem) >= l && elem[0:l] == "urses/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "courseId"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetCourseByCourseIdRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'e': // Prefix: "events"
				origElem := elem
				if l := len("events"); len(elem) >= l && elem[0:l] == "events" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleGetEventsRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}

				elem = origElem
			case 'g': // Prefix: "graph"
				origElem := elem
				if l := len("graph"); len(elem) >= l && elem[0:l] == "graph" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleGetGraphRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}

				elem = origElem
			case 'p': // Prefix: "p"
				origElem := elem
				if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "articipants/"
					origElem := elem
					if l := len("articipants/"); len(elem) >= l && elem[0:l] == "articipants/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "login"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetParticipantByLoginRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'b': // Prefix: "badges"
							origElem := elem
							if l := len("badges"); len(elem) >= l && elem[0:l] == "badges" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetBadgesByLoginRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						case 'c': // Prefix: "co"
							origElem := elem
							if l := len("co"); len(elem) >= l && elem[0:l] == "co" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'a': // Prefix: "alition"
								origElem := elem
								if l := len("alition"); len(elem) >= l && elem[0:l] == "alition" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetCoalitionByLoginRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							case 'u': // Prefix: "urses"
								origElem := elem
								if l := len("urses"); len(elem) >= l && elem[0:l] == "urses" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleGetParticipantCoursesByLoginRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "courseId"
									// Leaf parameter
									args[1] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGetParticipantCourseByLoginAndCourseIdRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						case 'e': // Prefix: "experience-history"
							origElem := elem
							if l := len("experience-history"); len(elem) >= l && elem[0:l] == "experience-history" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetXpHistoryByLoginRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						case 'f': // Prefix: "feedback"
							origElem := elem
							if l := len("feedback"); len(elem) >= l && elem[0:l] == "feedback" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetParticipantFeedbackByLoginRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						case 'l': // Prefix: "logtime"
							origElem := elem
							if l := len("logtime"); len(elem) >= l && elem[0:l] == "logtime" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetLogWeeklyAvgHoursByLoginAndDateRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						case 'p': // Prefix: "p"
							origElem := elem
							if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'o': // Prefix: "oints"
								origElem := elem
								if l := len("oints"); len(elem) >= l && elem[0:l] == "oints" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGetPointsByLoginRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

								elem = origElem
							case 'r': // Prefix: "rojects"
								origElem := elem
								if l := len("rojects"); len(elem) >= l && elem[0:l] == "rojects" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleGetParticipantProjectsByLoginRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "projectId"
									// Leaf parameter
									args[1] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGetParticipantProjectByLoginAndProjectIdRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						case 's': // Prefix: "skills"
							origElem := elem
							if l := len("skills"); len(elem) >= l && elem[0:l] == "skills" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetSoftSkillByLoginRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						case 'w': // Prefix: "workstation"
							origElem := elem
							if l := len("workstation"); len(elem) >= l && elem[0:l] == "workstation" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetParticipantWorkstationByLoginRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 'r': // Prefix: "rojects/"
					origElem := elem
					if l := len("rojects/"); len(elem) >= l && elem[0:l] == "rojects/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "projectId"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetProjectByProjectIdRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/participants"
						origElem := elem
						if l := len("/participants"); len(elem) >= l && elem[0:l] == "/participants" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetLoginsByProjectIdRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 's': // Prefix: "sales"
				origElem := elem
				if l := len("sales"); len(elem) >= l && elem[0:l] == "sales" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleGetSalesRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}

				elem = origElem
			}

			elem = origElem
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	summary     string
	operationID string
	pathPattern string
	count       int
	args        [2]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// Summary returns OpenAPI summary.
func (r Route) Summary() string {
	return r.summary
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/v1/"
			origElem := elem
			if l := len("/v1/"); len(elem) >= l && elem[0:l] == "/v1/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'c': // Prefix: "c"
				origElem := elem
				if l := len("c"); len(elem) >= l && elem[0:l] == "c" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "ampuses"
					origElem := elem
					if l := len("ampuses"); len(elem) >= l && elem[0:l] == "ampuses" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "GetCampuses"
							r.summary = "Returns a list of campuses"
							r.operationID = "getCampuses"
							r.pathPattern = "/v1/campuses"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "campusId"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'c': // Prefix: "c"
								origElem := elem
								if l := len("c"); len(elem) >= l && elem[0:l] == "c" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'l': // Prefix: "lusters"
									origElem := elem
									if l := len("lusters"); len(elem) >= l && elem[0:l] == "lusters" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = "GetClustersByCampus"
											r.summary = "Returns a list of clusters in a campus by ID"
											r.operationID = "getClustersByCampus"
											r.pathPattern = "/v1/campuses/{campusId}/clusters"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

									elem = origElem
								case 'o': // Prefix: "oalitions"
									origElem := elem
									if l := len("oalitions"); len(elem) >= l && elem[0:l] == "oalitions" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = "GetCoalitionsByCampus"
											r.summary = "Returns a list of coalitions in a campus by ID"
											r.operationID = "getCoalitionsByCampus"
											r.pathPattern = "/v1/campuses/{campusId}/coalitions"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							case 'p': // Prefix: "participants"
								origElem := elem
								if l := len("participants"); len(elem) >= l && elem[0:l] == "participants" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = "GetParticipantsByCampusId"
										r.summary = "Returns a list of participants in a campus by ID"
										r.operationID = "getParticipantsByCampusId"
										r.pathPattern = "/v1/campuses/{campusId}/participants"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 'l': // Prefix: "lusters/"
					origElem := elem
					if l := len("lusters/"); len(elem) >= l && elem[0:l] == "lusters/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "clusterId"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '/': // Prefix: "/map"
						origElem := elem
						if l := len("/map"); len(elem) >= l && elem[0:l] == "/map" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = "GetParticipantsByCoalitionId1"
								r.summary = "Returns a cluster map"
								r.operationID = "getParticipantsByCoalitionId_1"
								r.pathPattern = "/v1/clusters/{clusterId}/map"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				case 'o': // Prefix: "o"
					origElem := elem
					if l := len("o"); len(elem) >= l && elem[0:l] == "o" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'a': // Prefix: "alitions/"
						origElem := elem
						if l := len("alitions/"); len(elem) >= l && elem[0:l] == "alitions/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "coalitionId"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case '/': // Prefix: "/participants"
							origElem := elem
							if l := len("/participants"); len(elem) >= l && elem[0:l] == "/participants" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "GetParticipantsByCoalitionId"
									r.summary = "Returns a list of participants in a coalition by ID"
									r.operationID = "getParticipantsByCoalitionId"
									r.pathPattern = "/v1/coalitions/{coalitionId}/participants"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					case 'u': // Prefix: "urses/"
						origElem := elem
						if l := len("urses/"); len(elem) >= l && elem[0:l] == "urses/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "courseId"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = "GetCourseByCourseId"
								r.summary = "Returns course information by ID"
								r.operationID = "getCourseByCourseId"
								r.pathPattern = "/v1/courses/{courseId}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'e': // Prefix: "events"
				origElem := elem
				if l := len("events"); len(elem) >= l && elem[0:l] == "events" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "GET":
						r.name = "GetEvents"
						r.summary = "Returns a list of events"
						r.operationID = "getEvents"
						r.pathPattern = "/v1/events"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

				elem = origElem
			case 'g': // Prefix: "graph"
				origElem := elem
				if l := len("graph"); len(elem) >= l && elem[0:l] == "graph" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "GET":
						r.name = "GetGraph"
						r.summary = "Returns a participant projects map"
						r.operationID = "getGraph"
						r.pathPattern = "/v1/graph"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

				elem = origElem
			case 'p': // Prefix: "p"
				origElem := elem
				if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "articipants/"
					origElem := elem
					if l := len("articipants/"); len(elem) >= l && elem[0:l] == "articipants/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "login"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "GetParticipantByLogin"
							r.summary = "Returns basic participant information by login"
							r.operationID = "getParticipantByLogin"
							r.pathPattern = "/v1/participants/{login}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'b': // Prefix: "badges"
							origElem := elem
							if l := len("badges"); len(elem) >= l && elem[0:l] == "badges" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "GetBadgesByLogin"
									r.summary = "Returns a list of participant badges by login"
									r.operationID = "getBadgesByLogin"
									r.pathPattern = "/v1/participants/{login}/badges"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 'c': // Prefix: "co"
							origElem := elem
							if l := len("co"); len(elem) >= l && elem[0:l] == "co" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'a': // Prefix: "alition"
								origElem := elem
								if l := len("alition"); len(elem) >= l && elem[0:l] == "alition" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = "GetCoalitionByLogin"
										r.summary = "Returns participant coalition information by login"
										r.operationID = "getCoalitionByLogin"
										r.pathPattern = "/v1/participants/{login}/coalition"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							case 'u': // Prefix: "urses"
								origElem := elem
								if l := len("urses"); len(elem) >= l && elem[0:l] == "urses" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = "GetParticipantCoursesByLogin"
										r.summary = "Returns participant courses information by login"
										r.operationID = "getParticipantCoursesByLogin"
										r.pathPattern = "/v1/participants/{login}/courses"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "courseId"
									// Leaf parameter
									args[1] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = "GetParticipantCourseByLoginAndCourseId"
											r.summary = "Returns participant course information by ID"
											r.operationID = "getParticipantCourseByLoginAndCourseId"
											r.pathPattern = "/v1/participants/{login}/courses/{courseId}"
											r.args = args
											r.count = 2
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						case 'e': // Prefix: "experience-history"
							origElem := elem
							if l := len("experience-history"); len(elem) >= l && elem[0:l] == "experience-history" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "GetXpHistoryByLogin"
									r.summary = "Returns a list of participant XP accruals by login"
									r.operationID = "getXpHistoryByLogin"
									r.pathPattern = "/v1/participants/{login}/experience-history"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 'f': // Prefix: "feedback"
							origElem := elem
							if l := len("feedback"); len(elem) >= l && elem[0:l] == "feedback" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "GetParticipantFeedbackByLogin"
									r.summary = "Returns average participant feedback points by login"
									r.operationID = "getParticipantFeedbackByLogin"
									r.pathPattern = "/v1/participants/{login}/feedback"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 'l': // Prefix: "logtime"
							origElem := elem
							if l := len("logtime"); len(elem) >= l && elem[0:l] == "logtime" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "GetLogWeeklyAvgHoursByLoginAndDate"
									r.summary = "Returns an average week logtime by login"
									r.operationID = "getLogWeeklyAvgHoursByLoginAndDate"
									r.pathPattern = "/v1/participants/{login}/logtime"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 'p': // Prefix: "p"
							origElem := elem
							if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'o': // Prefix: "oints"
								origElem := elem
								if l := len("oints"); len(elem) >= l && elem[0:l] == "oints" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = "GetPointsByLogin"
										r.summary = "Returns participant points information by login"
										r.operationID = "getPointsByLogin"
										r.pathPattern = "/v1/participants/{login}/points"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							case 'r': // Prefix: "rojects"
								origElem := elem
								if l := len("rojects"); len(elem) >= l && elem[0:l] == "rojects" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = "GetParticipantProjectsByLogin"
										r.summary = "Returns participant projects information by login"
										r.operationID = "getParticipantProjectsByLogin"
										r.pathPattern = "/v1/participants/{login}/projects"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "projectId"
									// Leaf parameter
									args[1] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = "GetParticipantProjectByLoginAndProjectId"
											r.summary = "Returns participant project information by ID"
											r.operationID = "getParticipantProjectByLoginAndProjectId"
											r.pathPattern = "/v1/participants/{login}/projects/{projectId}"
											r.args = args
											r.count = 2
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						case 's': // Prefix: "skills"
							origElem := elem
							if l := len("skills"); len(elem) >= l && elem[0:l] == "skills" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "GetSoftSkillByLogin"
									r.summary = "Returns participant skill points by login"
									r.operationID = "getSoftSkillByLogin"
									r.pathPattern = "/v1/participants/{login}/skills"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 'w': // Prefix: "workstation"
							origElem := elem
							if l := len("workstation"); len(elem) >= l && elem[0:l] == "workstation" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "GetParticipantWorkstationByLogin"
									r.summary = "Returns a participant workstation by login"
									r.operationID = "getParticipantWorkstationByLogin"
									r.pathPattern = "/v1/participants/{login}/workstation"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				case 'r': // Prefix: "rojects/"
					origElem := elem
					if l := len("rojects/"); len(elem) >= l && elem[0:l] == "rojects/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "projectId"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "GetProjectByProjectId"
							r.summary = "Returns project information by ID"
							r.operationID = "getProjectByProjectId"
							r.pathPattern = "/v1/projects/{projectId}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/participants"
						origElem := elem
						if l := len("/participants"); len(elem) >= l && elem[0:l] == "/participants" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = "GetLoginsByProjectId"
								r.summary = "Returns a list of participants by project ID"
								r.operationID = "getLoginsByProjectId"
								r.pathPattern = "/v1/projects/{projectId}/participants"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 's': // Prefix: "sales"
				origElem := elem
				if l := len("sales"); len(elem) >= l && elem[0:l] == "sales" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "GET":
						r.name = "GetSales"
						r.summary = "Returns current sales’ statuses within parallel"
						r.operationID = "getSales"
						r.pathPattern = "/v1/sales"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

				elem = origElem
			}

			elem = origElem
		}
	}
	return r, false
}
