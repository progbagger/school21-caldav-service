// Code generated by ogen, DO NOT EDIT.

package api

import (
	"time"

	"github.com/go-faster/errors"
	"github.com/google/uuid"
)

type Authorization struct {
	APIKey string
}

// GetAPIKey returns the value of APIKey.
func (s *Authorization) GetAPIKey() string {
	return s.APIKey
}

// SetAPIKey sets the value of APIKey.
func (s *Authorization) SetAPIKey(val string) {
	s.APIKey = val
}

// Campus.
// Ref: #/components/schemas/CampusV1DTO
type CampusV1DTO struct {
	// Campus ID.
	ID uuid.UUID `json:"id"`
	// Short campus name.
	ShortName string `json:"shortName"`
	// Full campus name.
	FullName string `json:"fullName"`
}

// GetID returns the value of ID.
func (s *CampusV1DTO) GetID() uuid.UUID {
	return s.ID
}

// GetShortName returns the value of ShortName.
func (s *CampusV1DTO) GetShortName() string {
	return s.ShortName
}

// GetFullName returns the value of FullName.
func (s *CampusV1DTO) GetFullName() string {
	return s.FullName
}

// SetID sets the value of ID.
func (s *CampusV1DTO) SetID(val uuid.UUID) {
	s.ID = val
}

// SetShortName sets the value of ShortName.
func (s *CampusV1DTO) SetShortName(val string) {
	s.ShortName = val
}

// SetFullName sets the value of FullName.
func (s *CampusV1DTO) SetFullName(val string) {
	s.FullName = val
}

// Campuses.
// Ref: #/components/schemas/CampusesV1DTO
type CampusesV1DTO struct {
	// Array of campus objects.
	Campuses []CampusV1DTO `json:"campuses"`
}

// GetCampuses returns the value of Campuses.
func (s *CampusesV1DTO) GetCampuses() []CampusV1DTO {
	return s.Campuses
}

// SetCampuses sets the value of Campuses.
func (s *CampusesV1DTO) SetCampuses(val []CampusV1DTO) {
	s.Campuses = val
}

func (*CampusesV1DTO) getCampusesRes() {}

// Cluster map.
// Ref: #/components/schemas/ClusterMapV1DTO
type ClusterMapV1DTO struct {
	// Array of cluster places.
	ClusterMap []WorkplaceV1DTO `json:"clusterMap"`
}

// GetClusterMap returns the value of ClusterMap.
func (s *ClusterMapV1DTO) GetClusterMap() []WorkplaceV1DTO {
	return s.ClusterMap
}

// SetClusterMap sets the value of ClusterMap.
func (s *ClusterMapV1DTO) SetClusterMap(val []WorkplaceV1DTO) {
	s.ClusterMap = val
}

func (*ClusterMapV1DTO) getParticipantsByCoalitionId1Res() {}

// Cluster.
// Ref: #/components/schemas/ClusterV1DTO
type ClusterV1DTO struct {
	// Cluster ID.
	ID int64 `json:"id"`
	// Cluster name.
	Name string `json:"name"`
	// Cluster capacity.
	Capacity int32 `json:"capacity"`
	// Number of available seats.
	AvailableCapacity int32 `json:"availableCapacity"`
	// The floor where the cluster is located.
	Floor int32 `json:"floor"`
}

// GetID returns the value of ID.
func (s *ClusterV1DTO) GetID() int64 {
	return s.ID
}

// GetName returns the value of Name.
func (s *ClusterV1DTO) GetName() string {
	return s.Name
}

// GetCapacity returns the value of Capacity.
func (s *ClusterV1DTO) GetCapacity() int32 {
	return s.Capacity
}

// GetAvailableCapacity returns the value of AvailableCapacity.
func (s *ClusterV1DTO) GetAvailableCapacity() int32 {
	return s.AvailableCapacity
}

// GetFloor returns the value of Floor.
func (s *ClusterV1DTO) GetFloor() int32 {
	return s.Floor
}

// SetID sets the value of ID.
func (s *ClusterV1DTO) SetID(val int64) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *ClusterV1DTO) SetName(val string) {
	s.Name = val
}

// SetCapacity sets the value of Capacity.
func (s *ClusterV1DTO) SetCapacity(val int32) {
	s.Capacity = val
}

// SetAvailableCapacity sets the value of AvailableCapacity.
func (s *ClusterV1DTO) SetAvailableCapacity(val int32) {
	s.AvailableCapacity = val
}

// SetFloor sets the value of Floor.
func (s *ClusterV1DTO) SetFloor(val int32) {
	s.Floor = val
}

// Clusters.
// Ref: #/components/schemas/ClustersV1DTO
type ClustersV1DTO struct {
	// Array of cluster objects.
	Clusters []ClusterV1DTO `json:"clusters"`
}

// GetClusters returns the value of Clusters.
func (s *ClustersV1DTO) GetClusters() []ClusterV1DTO {
	return s.Clusters
}

// SetClusters sets the value of Clusters.
func (s *ClustersV1DTO) SetClusters(val []ClusterV1DTO) {
	s.Clusters = val
}

func (*ClustersV1DTO) getClustersByCampusRes() {}

// Coalition.
// Ref: #/components/schemas/CoalitionV1DTO
type CoalitionV1DTO struct {
	// Coalition ID.
	CoalitionId int64 `json:"coalitionId"`
	// Coalition name.
	Name string `json:"name"`
}

// GetCoalitionId returns the value of CoalitionId.
func (s *CoalitionV1DTO) GetCoalitionId() int64 {
	return s.CoalitionId
}

// GetName returns the value of Name.
func (s *CoalitionV1DTO) GetName() string {
	return s.Name
}

// SetCoalitionId sets the value of CoalitionId.
func (s *CoalitionV1DTO) SetCoalitionId(val int64) {
	s.CoalitionId = val
}

// SetName sets the value of Name.
func (s *CoalitionV1DTO) SetName(val string) {
	s.Name = val
}

// Coalitions.
// Ref: #/components/schemas/CoalitionsV1DTO
type CoalitionsV1DTO struct {
	// Array of coalition objects.
	Coalitions []CoalitionV1DTO `json:"coalitions"`
}

// GetCoalitions returns the value of Coalitions.
func (s *CoalitionsV1DTO) GetCoalitions() []CoalitionV1DTO {
	return s.Coalitions
}

// SetCoalitions sets the value of Coalitions.
func (s *CoalitionsV1DTO) SetCoalitions(val []CoalitionV1DTO) {
	s.Coalitions = val
}

func (*CoalitionsV1DTO) getCoalitionsByCampusRes() {}

// Condition group objects.
// Ref: #/components/schemas/ConditionRuleGroupV1DTO
type ConditionRuleGroupV1DTO struct {
	// The logical condition operator.
	LogicalOperator OptConditionRuleGroupV1DTOLogicalOperator `json:"logicalOperator"`
	// Array of conditions in the condition group.
	RulesInGroup []ConditionRuleV1DTO `json:"rulesInGroup"`
}

// GetLogicalOperator returns the value of LogicalOperator.
func (s *ConditionRuleGroupV1DTO) GetLogicalOperator() OptConditionRuleGroupV1DTOLogicalOperator {
	return s.LogicalOperator
}

// GetRulesInGroup returns the value of RulesInGroup.
func (s *ConditionRuleGroupV1DTO) GetRulesInGroup() []ConditionRuleV1DTO {
	return s.RulesInGroup
}

// SetLogicalOperator sets the value of LogicalOperator.
func (s *ConditionRuleGroupV1DTO) SetLogicalOperator(val OptConditionRuleGroupV1DTOLogicalOperator) {
	s.LogicalOperator = val
}

// SetRulesInGroup sets the value of RulesInGroup.
func (s *ConditionRuleGroupV1DTO) SetRulesInGroup(val []ConditionRuleV1DTO) {
	s.RulesInGroup = val
}

// The logical condition operator.
type ConditionRuleGroupV1DTOLogicalOperator string

const (
	ConditionRuleGroupV1DTOLogicalOperatorOR  ConditionRuleGroupV1DTOLogicalOperator = "OR"
	ConditionRuleGroupV1DTOLogicalOperatorAND ConditionRuleGroupV1DTOLogicalOperator = "AND"
)

// AllValues returns all ConditionRuleGroupV1DTOLogicalOperator values.
func (ConditionRuleGroupV1DTOLogicalOperator) AllValues() []ConditionRuleGroupV1DTOLogicalOperator {
	return []ConditionRuleGroupV1DTOLogicalOperator{
		ConditionRuleGroupV1DTOLogicalOperatorOR,
		ConditionRuleGroupV1DTOLogicalOperatorAND,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ConditionRuleGroupV1DTOLogicalOperator) MarshalText() ([]byte, error) {
	switch s {
	case ConditionRuleGroupV1DTOLogicalOperatorOR:
		return []byte(s), nil
	case ConditionRuleGroupV1DTOLogicalOperatorAND:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ConditionRuleGroupV1DTOLogicalOperator) UnmarshalText(data []byte) error {
	switch ConditionRuleGroupV1DTOLogicalOperator(data) {
	case ConditionRuleGroupV1DTOLogicalOperatorOR:
		*s = ConditionRuleGroupV1DTOLogicalOperatorOR
		return nil
	case ConditionRuleGroupV1DTOLogicalOperatorAND:
		*s = ConditionRuleGroupV1DTOLogicalOperatorAND
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Condition in the condition group.
// Ref: #/components/schemas/ConditionRuleV1DTO
type ConditionRuleV1DTO struct {
	// The logical condition operator.
	LogicalOperator OptConditionRuleV1DTOLogicalOperator `json:"logicalOperator"`
	Value           ConditionRuleValueV1DTO              `json:"value"`
}

// GetLogicalOperator returns the value of LogicalOperator.
func (s *ConditionRuleV1DTO) GetLogicalOperator() OptConditionRuleV1DTOLogicalOperator {
	return s.LogicalOperator
}

// GetValue returns the value of Value.
func (s *ConditionRuleV1DTO) GetValue() ConditionRuleValueV1DTO {
	return s.Value
}

// SetLogicalOperator sets the value of LogicalOperator.
func (s *ConditionRuleV1DTO) SetLogicalOperator(val OptConditionRuleV1DTOLogicalOperator) {
	s.LogicalOperator = val
}

// SetValue sets the value of Value.
func (s *ConditionRuleV1DTO) SetValue(val ConditionRuleValueV1DTO) {
	s.Value = val
}

// The logical condition operator.
type ConditionRuleV1DTOLogicalOperator string

const (
	ConditionRuleV1DTOLogicalOperatorOR  ConditionRuleV1DTOLogicalOperator = "OR"
	ConditionRuleV1DTOLogicalOperatorAND ConditionRuleV1DTOLogicalOperator = "AND"
)

// AllValues returns all ConditionRuleV1DTOLogicalOperator values.
func (ConditionRuleV1DTOLogicalOperator) AllValues() []ConditionRuleV1DTOLogicalOperator {
	return []ConditionRuleV1DTOLogicalOperator{
		ConditionRuleV1DTOLogicalOperatorOR,
		ConditionRuleV1DTOLogicalOperatorAND,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ConditionRuleV1DTOLogicalOperator) MarshalText() ([]byte, error) {
	switch s {
	case ConditionRuleV1DTOLogicalOperatorOR:
		return []byte(s), nil
	case ConditionRuleV1DTOLogicalOperatorAND:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ConditionRuleV1DTOLogicalOperator) UnmarshalText(data []byte) error {
	switch ConditionRuleV1DTOLogicalOperator(data) {
	case ConditionRuleV1DTOLogicalOperatorOR:
		*s = ConditionRuleV1DTOLogicalOperatorOR
		return nil
	case ConditionRuleV1DTOLogicalOperatorAND:
		*s = ConditionRuleV1DTOLogicalOperatorAND
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The object of the condition description.
// Ref: #/components/schemas/ConditionRuleValueV1DTO
type ConditionRuleValueV1DTO struct {
	// Field ID.
	FieldId int64 `json:"fieldId"`
	// Field Name.
	FieldName string `json:"fieldName"`
	// Subfield ID.
	SubFieldKey string `json:"subFieldKey"`
	// Subfield Name.
	SubFieldValue string `json:"subFieldValue"`
	// Condition value operator.
	Operator string `json:"operator"`
	// Array of condition values.
	Value []ConditionValueValueV1DTO `json:"value"`
}

// GetFieldId returns the value of FieldId.
func (s *ConditionRuleValueV1DTO) GetFieldId() int64 {
	return s.FieldId
}

// GetFieldName returns the value of FieldName.
func (s *ConditionRuleValueV1DTO) GetFieldName() string {
	return s.FieldName
}

// GetSubFieldKey returns the value of SubFieldKey.
func (s *ConditionRuleValueV1DTO) GetSubFieldKey() string {
	return s.SubFieldKey
}

// GetSubFieldValue returns the value of SubFieldValue.
func (s *ConditionRuleValueV1DTO) GetSubFieldValue() string {
	return s.SubFieldValue
}

// GetOperator returns the value of Operator.
func (s *ConditionRuleValueV1DTO) GetOperator() string {
	return s.Operator
}

// GetValue returns the value of Value.
func (s *ConditionRuleValueV1DTO) GetValue() []ConditionValueValueV1DTO {
	return s.Value
}

// SetFieldId sets the value of FieldId.
func (s *ConditionRuleValueV1DTO) SetFieldId(val int64) {
	s.FieldId = val
}

// SetFieldName sets the value of FieldName.
func (s *ConditionRuleValueV1DTO) SetFieldName(val string) {
	s.FieldName = val
}

// SetSubFieldKey sets the value of SubFieldKey.
func (s *ConditionRuleValueV1DTO) SetSubFieldKey(val string) {
	s.SubFieldKey = val
}

// SetSubFieldValue sets the value of SubFieldValue.
func (s *ConditionRuleValueV1DTO) SetSubFieldValue(val string) {
	s.SubFieldValue = val
}

// SetOperator sets the value of Operator.
func (s *ConditionRuleValueV1DTO) SetOperator(val string) {
	s.Operator = val
}

// SetValue sets the value of Value.
func (s *ConditionRuleValueV1DTO) SetValue(val []ConditionValueValueV1DTO) {
	s.Value = val
}

// Array of condition values.
// Ref: #/components/schemas/ConditionValueValueV1DTO
type ConditionValueValueV1DTO struct {
	// The value of the condition.
	Key string `json:"key"`
	// Name value of the condition.
	Value OptString `json:"value"`
}

// GetKey returns the value of Key.
func (s *ConditionValueValueV1DTO) GetKey() string {
	return s.Key
}

// GetValue returns the value of Value.
func (s *ConditionValueValueV1DTO) GetValue() OptString {
	return s.Value
}

// SetKey sets the value of Key.
func (s *ConditionValueValueV1DTO) SetKey(val string) {
	s.Key = val
}

// SetValue sets the value of Value.
func (s *ConditionValueValueV1DTO) SetValue(val OptString) {
	s.Value = val
}

// Course.
// Ref: #/components/schemas/CourseV1DTO
type CourseV1DTO struct {
	// Course ID.
	CourseId int64 `json:"courseId"`
	// Course name.
	Title string `json:"title"`
	// Course description.
	Description string `json:"description"`
	// Course duration (in hours).
	DurationHours int32 `json:"durationHours"`
	// XP per course.
	Xp int32 `json:"xp"`
	// Array of condition group objects.
	StartConditions []ConditionRuleGroupV1DTO `json:"startConditions"`
}

// GetCourseId returns the value of CourseId.
func (s *CourseV1DTO) GetCourseId() int64 {
	return s.CourseId
}

// GetTitle returns the value of Title.
func (s *CourseV1DTO) GetTitle() string {
	return s.Title
}

// GetDescription returns the value of Description.
func (s *CourseV1DTO) GetDescription() string {
	return s.Description
}

// GetDurationHours returns the value of DurationHours.
func (s *CourseV1DTO) GetDurationHours() int32 {
	return s.DurationHours
}

// GetXp returns the value of Xp.
func (s *CourseV1DTO) GetXp() int32 {
	return s.Xp
}

// GetStartConditions returns the value of StartConditions.
func (s *CourseV1DTO) GetStartConditions() []ConditionRuleGroupV1DTO {
	return s.StartConditions
}

// SetCourseId sets the value of CourseId.
func (s *CourseV1DTO) SetCourseId(val int64) {
	s.CourseId = val
}

// SetTitle sets the value of Title.
func (s *CourseV1DTO) SetTitle(val string) {
	s.Title = val
}

// SetDescription sets the value of Description.
func (s *CourseV1DTO) SetDescription(val string) {
	s.Description = val
}

// SetDurationHours sets the value of DurationHours.
func (s *CourseV1DTO) SetDurationHours(val int32) {
	s.DurationHours = val
}

// SetXp sets the value of Xp.
func (s *CourseV1DTO) SetXp(val int32) {
	s.Xp = val
}

// SetStartConditions sets the value of StartConditions.
func (s *CourseV1DTO) SetStartConditions(val []ConditionRuleGroupV1DTO) {
	s.StartConditions = val
}

func (*CourseV1DTO) getCourseByCourseIdRes() {}

// ErrorResponseDTO.
// Ref: #/components/schemas/ErrorResponseDTO
type ErrorResponseDTO struct {
	// Status.
	Status int32 `json:"status"`
	// A unique generated error code from the service.
	ExceptionUUID string `json:"exceptionUUID"`
	// Code.
	Code string `json:"code"`
	// Message.
	Message string `json:"message"`
}

// GetStatus returns the value of Status.
func (s *ErrorResponseDTO) GetStatus() int32 {
	return s.Status
}

// GetExceptionUUID returns the value of ExceptionUUID.
func (s *ErrorResponseDTO) GetExceptionUUID() string {
	return s.ExceptionUUID
}

// GetCode returns the value of Code.
func (s *ErrorResponseDTO) GetCode() string {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *ErrorResponseDTO) GetMessage() string {
	return s.Message
}

// SetStatus sets the value of Status.
func (s *ErrorResponseDTO) SetStatus(val int32) {
	s.Status = val
}

// SetExceptionUUID sets the value of ExceptionUUID.
func (s *ErrorResponseDTO) SetExceptionUUID(val string) {
	s.ExceptionUUID = val
}

// SetCode sets the value of Code.
func (s *ErrorResponseDTO) SetCode(val string) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *ErrorResponseDTO) SetMessage(val string) {
	s.Message = val
}

// Event.
// Ref: #/components/schemas/EventV1DTO
type EventV1DTO struct {
	// Event ID.
	ID int64 `json:"id"`
	// Event type.
	Type string `json:"type"`
	// Event name.
	Name string `json:"name"`
	// Event description.
	Description OptString `json:"description"`
	// Location of the event.
	Location string `json:"location"`
	// Date and time of the start of the event (UTC).
	StartDateTime time.Time `json:"startDateTime"`
	// Date and time of the end of the event (UTC).
	EndDateTime time.Time `json:"endDateTime"`
	// Array of strings with the logins of the organizing participants.
	Organizers []string `json:"organizers"`
	// Maximum number of participants who can register for the event.
	Capacity int32 `json:"capacity"`
	// Current number of participants registered for the event.
	RegisterCount int32 `json:"registerCount"`
}

// GetID returns the value of ID.
func (s *EventV1DTO) GetID() int64 {
	return s.ID
}

// GetType returns the value of Type.
func (s *EventV1DTO) GetType() string {
	return s.Type
}

// GetName returns the value of Name.
func (s *EventV1DTO) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *EventV1DTO) GetDescription() OptString {
	return s.Description
}

// GetLocation returns the value of Location.
func (s *EventV1DTO) GetLocation() string {
	return s.Location
}

// GetStartDateTime returns the value of StartDateTime.
func (s *EventV1DTO) GetStartDateTime() time.Time {
	return s.StartDateTime
}

// GetEndDateTime returns the value of EndDateTime.
func (s *EventV1DTO) GetEndDateTime() time.Time {
	return s.EndDateTime
}

// GetOrganizers returns the value of Organizers.
func (s *EventV1DTO) GetOrganizers() []string {
	return s.Organizers
}

// GetCapacity returns the value of Capacity.
func (s *EventV1DTO) GetCapacity() int32 {
	return s.Capacity
}

// GetRegisterCount returns the value of RegisterCount.
func (s *EventV1DTO) GetRegisterCount() int32 {
	return s.RegisterCount
}

// SetID sets the value of ID.
func (s *EventV1DTO) SetID(val int64) {
	s.ID = val
}

// SetType sets the value of Type.
func (s *EventV1DTO) SetType(val string) {
	s.Type = val
}

// SetName sets the value of Name.
func (s *EventV1DTO) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *EventV1DTO) SetDescription(val OptString) {
	s.Description = val
}

// SetLocation sets the value of Location.
func (s *EventV1DTO) SetLocation(val string) {
	s.Location = val
}

// SetStartDateTime sets the value of StartDateTime.
func (s *EventV1DTO) SetStartDateTime(val time.Time) {
	s.StartDateTime = val
}

// SetEndDateTime sets the value of EndDateTime.
func (s *EventV1DTO) SetEndDateTime(val time.Time) {
	s.EndDateTime = val
}

// SetOrganizers sets the value of Organizers.
func (s *EventV1DTO) SetOrganizers(val []string) {
	s.Organizers = val
}

// SetCapacity sets the value of Capacity.
func (s *EventV1DTO) SetCapacity(val int32) {
	s.Capacity = val
}

// SetRegisterCount sets the value of RegisterCount.
func (s *EventV1DTO) SetRegisterCount(val int32) {
	s.RegisterCount = val
}

// Events.
// Ref: #/components/schemas/EventsV1DTO
type EventsV1DTO struct {
	// Array of events.
	Events []EventV1DTO `json:"events"`
}

// GetEvents returns the value of Events.
func (s *EventsV1DTO) GetEvents() []EventV1DTO {
	return s.Events
}

// SetEvents sets the value of Events.
func (s *EventsV1DTO) SetEvents(val []EventV1DTO) {
	s.Events = val
}

func (*EventsV1DTO) getEventsRes() {}

type GetBadgesByLoginBadRequest ErrorResponseDTO

func (*GetBadgesByLoginBadRequest) getBadgesByLoginRes() {}

type GetBadgesByLoginForbidden ErrorResponseDTO

func (*GetBadgesByLoginForbidden) getBadgesByLoginRes() {}

type GetBadgesByLoginInternalServerError ErrorResponseDTO

func (*GetBadgesByLoginInternalServerError) getBadgesByLoginRes() {}

type GetBadgesByLoginNotFound ErrorResponseDTO

func (*GetBadgesByLoginNotFound) getBadgesByLoginRes() {}

// GetBadgesByLoginTooManyRequests is response for GetBadgesByLogin operation.
type GetBadgesByLoginTooManyRequests struct{}

func (*GetBadgesByLoginTooManyRequests) getBadgesByLoginRes() {}

// GetBadgesByLoginUnauthorized is response for GetBadgesByLogin operation.
type GetBadgesByLoginUnauthorized struct{}

func (*GetBadgesByLoginUnauthorized) getBadgesByLoginRes() {}

type GetCampusesBadRequest ErrorResponseDTO

func (*GetCampusesBadRequest) getCampusesRes() {}

type GetCampusesInternalServerError ErrorResponseDTO

func (*GetCampusesInternalServerError) getCampusesRes() {}

// GetCampusesTooManyRequests is response for GetCampuses operation.
type GetCampusesTooManyRequests struct{}

func (*GetCampusesTooManyRequests) getCampusesRes() {}

// GetCampusesUnauthorized is response for GetCampuses operation.
type GetCampusesUnauthorized struct{}

func (*GetCampusesUnauthorized) getCampusesRes() {}

type GetClustersByCampusBadRequest ErrorResponseDTO

func (*GetClustersByCampusBadRequest) getClustersByCampusRes() {}

type GetClustersByCampusForbidden ErrorResponseDTO

func (*GetClustersByCampusForbidden) getClustersByCampusRes() {}

type GetClustersByCampusInternalServerError ErrorResponseDTO

func (*GetClustersByCampusInternalServerError) getClustersByCampusRes() {}

type GetClustersByCampusNotFound ErrorResponseDTO

func (*GetClustersByCampusNotFound) getClustersByCampusRes() {}

// GetClustersByCampusTooManyRequests is response for GetClustersByCampus operation.
type GetClustersByCampusTooManyRequests struct{}

func (*GetClustersByCampusTooManyRequests) getClustersByCampusRes() {}

// GetClustersByCampusUnauthorized is response for GetClustersByCampus operation.
type GetClustersByCampusUnauthorized struct{}

func (*GetClustersByCampusUnauthorized) getClustersByCampusRes() {}

type GetCoalitionByLoginBadRequest ErrorResponseDTO

func (*GetCoalitionByLoginBadRequest) getCoalitionByLoginRes() {}

type GetCoalitionByLoginForbidden ErrorResponseDTO

func (*GetCoalitionByLoginForbidden) getCoalitionByLoginRes() {}

type GetCoalitionByLoginInternalServerError ErrorResponseDTO

func (*GetCoalitionByLoginInternalServerError) getCoalitionByLoginRes() {}

type GetCoalitionByLoginNotFound ErrorResponseDTO

func (*GetCoalitionByLoginNotFound) getCoalitionByLoginRes() {}

// GetCoalitionByLoginTooManyRequests is response for GetCoalitionByLogin operation.
type GetCoalitionByLoginTooManyRequests struct{}

func (*GetCoalitionByLoginTooManyRequests) getCoalitionByLoginRes() {}

// GetCoalitionByLoginUnauthorized is response for GetCoalitionByLogin operation.
type GetCoalitionByLoginUnauthorized struct{}

func (*GetCoalitionByLoginUnauthorized) getCoalitionByLoginRes() {}

type GetCoalitionsByCampusBadRequest ErrorResponseDTO

func (*GetCoalitionsByCampusBadRequest) getCoalitionsByCampusRes() {}

type GetCoalitionsByCampusForbidden ErrorResponseDTO

func (*GetCoalitionsByCampusForbidden) getCoalitionsByCampusRes() {}

type GetCoalitionsByCampusInternalServerError ErrorResponseDTO

func (*GetCoalitionsByCampusInternalServerError) getCoalitionsByCampusRes() {}

type GetCoalitionsByCampusNotFound ErrorResponseDTO

func (*GetCoalitionsByCampusNotFound) getCoalitionsByCampusRes() {}

// GetCoalitionsByCampusTooManyRequests is response for GetCoalitionsByCampus operation.
type GetCoalitionsByCampusTooManyRequests struct{}

func (*GetCoalitionsByCampusTooManyRequests) getCoalitionsByCampusRes() {}

// GetCoalitionsByCampusUnauthorized is response for GetCoalitionsByCampus operation.
type GetCoalitionsByCampusUnauthorized struct{}

func (*GetCoalitionsByCampusUnauthorized) getCoalitionsByCampusRes() {}

type GetCourseByCourseIdBadRequest ErrorResponseDTO

func (*GetCourseByCourseIdBadRequest) getCourseByCourseIdRes() {}

type GetCourseByCourseIdForbidden ErrorResponseDTO

func (*GetCourseByCourseIdForbidden) getCourseByCourseIdRes() {}

type GetCourseByCourseIdInternalServerError ErrorResponseDTO

func (*GetCourseByCourseIdInternalServerError) getCourseByCourseIdRes() {}

type GetCourseByCourseIdNotFound ErrorResponseDTO

func (*GetCourseByCourseIdNotFound) getCourseByCourseIdRes() {}

// GetCourseByCourseIdTooManyRequests is response for GetCourseByCourseId operation.
type GetCourseByCourseIdTooManyRequests struct{}

func (*GetCourseByCourseIdTooManyRequests) getCourseByCourseIdRes() {}

// GetCourseByCourseIdUnauthorized is response for GetCourseByCourseId operation.
type GetCourseByCourseIdUnauthorized struct{}

func (*GetCourseByCourseIdUnauthorized) getCourseByCourseIdRes() {}

type GetEventsBadRequest ErrorResponseDTO

func (*GetEventsBadRequest) getEventsRes() {}

type GetEventsInternalServerError ErrorResponseDTO

func (*GetEventsInternalServerError) getEventsRes() {}

// GetEventsTooManyRequests is response for GetEvents operation.
type GetEventsTooManyRequests struct{}

func (*GetEventsTooManyRequests) getEventsRes() {}

type GetEventsType string

const (
	GetEventsTypeACTIVITY GetEventsType = "ACTIVITY"
	GetEventsTypeEXAM     GetEventsType = "EXAM"
	GetEventsTypeTEST     GetEventsType = "TEST"
)

// AllValues returns all GetEventsType values.
func (GetEventsType) AllValues() []GetEventsType {
	return []GetEventsType{
		GetEventsTypeACTIVITY,
		GetEventsTypeEXAM,
		GetEventsTypeTEST,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetEventsType) MarshalText() ([]byte, error) {
	switch s {
	case GetEventsTypeACTIVITY:
		return []byte(s), nil
	case GetEventsTypeEXAM:
		return []byte(s), nil
	case GetEventsTypeTEST:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetEventsType) UnmarshalText(data []byte) error {
	switch GetEventsType(data) {
	case GetEventsTypeACTIVITY:
		*s = GetEventsTypeACTIVITY
		return nil
	case GetEventsTypeEXAM:
		*s = GetEventsTypeEXAM
		return nil
	case GetEventsTypeTEST:
		*s = GetEventsTypeTEST
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// GetEventsUnauthorized is response for GetEvents operation.
type GetEventsUnauthorized struct{}

func (*GetEventsUnauthorized) getEventsRes() {}

type GetGraphBadRequest ErrorResponseDTO

func (*GetGraphBadRequest) getGraphRes() {}

type GetGraphInternalServerError ErrorResponseDTO

func (*GetGraphInternalServerError) getGraphRes() {}

// GetGraphTooManyRequests is response for GetGraph operation.
type GetGraphTooManyRequests struct{}

func (*GetGraphTooManyRequests) getGraphRes() {}

// GetGraphUnauthorized is response for GetGraph operation.
type GetGraphUnauthorized struct{}

func (*GetGraphUnauthorized) getGraphRes() {}

type GetLogWeeklyAvgHoursByLoginAndDateBadRequest ErrorResponseDTO

func (*GetLogWeeklyAvgHoursByLoginAndDateBadRequest) getLogWeeklyAvgHoursByLoginAndDateRes() {}

type GetLogWeeklyAvgHoursByLoginAndDateForbidden ErrorResponseDTO

func (*GetLogWeeklyAvgHoursByLoginAndDateForbidden) getLogWeeklyAvgHoursByLoginAndDateRes() {}

type GetLogWeeklyAvgHoursByLoginAndDateInternalServerError ErrorResponseDTO

func (*GetLogWeeklyAvgHoursByLoginAndDateInternalServerError) getLogWeeklyAvgHoursByLoginAndDateRes() {
}

type GetLogWeeklyAvgHoursByLoginAndDateNotFound ErrorResponseDTO

func (*GetLogWeeklyAvgHoursByLoginAndDateNotFound) getLogWeeklyAvgHoursByLoginAndDateRes() {}

type GetLogWeeklyAvgHoursByLoginAndDateOKApplicationJSON float64

func (*GetLogWeeklyAvgHoursByLoginAndDateOKApplicationJSON) getLogWeeklyAvgHoursByLoginAndDateRes() {}

// GetLogWeeklyAvgHoursByLoginAndDateTooManyRequests is response for GetLogWeeklyAvgHoursByLoginAndDate operation.
type GetLogWeeklyAvgHoursByLoginAndDateTooManyRequests struct{}

func (*GetLogWeeklyAvgHoursByLoginAndDateTooManyRequests) getLogWeeklyAvgHoursByLoginAndDateRes() {}

// GetLogWeeklyAvgHoursByLoginAndDateUnauthorized is response for GetLogWeeklyAvgHoursByLoginAndDate operation.
type GetLogWeeklyAvgHoursByLoginAndDateUnauthorized struct{}

func (*GetLogWeeklyAvgHoursByLoginAndDateUnauthorized) getLogWeeklyAvgHoursByLoginAndDateRes() {}

type GetLoginsByProjectIdBadRequest ErrorResponseDTO

func (*GetLoginsByProjectIdBadRequest) getLoginsByProjectIdRes() {}

type GetLoginsByProjectIdForbidden ErrorResponseDTO

func (*GetLoginsByProjectIdForbidden) getLoginsByProjectIdRes() {}

type GetLoginsByProjectIdInternalServerError ErrorResponseDTO

func (*GetLoginsByProjectIdInternalServerError) getLoginsByProjectIdRes() {}

type GetLoginsByProjectIdNotFound ErrorResponseDTO

func (*GetLoginsByProjectIdNotFound) getLoginsByProjectIdRes() {}

type GetLoginsByProjectIdStatus string

const (
	GetLoginsByProjectIdStatusASSIGNED   GetLoginsByProjectIdStatus = "ASSIGNED"
	GetLoginsByProjectIdStatusREGISTERED GetLoginsByProjectIdStatus = "REGISTERED"
	GetLoginsByProjectIdStatusINPROGRESS GetLoginsByProjectIdStatus = "IN_PROGRESS"
	GetLoginsByProjectIdStatusINREVIEWS  GetLoginsByProjectIdStatus = "IN_REVIEWS"
	GetLoginsByProjectIdStatusACCEPTED   GetLoginsByProjectIdStatus = "ACCEPTED"
	GetLoginsByProjectIdStatusFAILED     GetLoginsByProjectIdStatus = "FAILED"
)

// AllValues returns all GetLoginsByProjectIdStatus values.
func (GetLoginsByProjectIdStatus) AllValues() []GetLoginsByProjectIdStatus {
	return []GetLoginsByProjectIdStatus{
		GetLoginsByProjectIdStatusASSIGNED,
		GetLoginsByProjectIdStatusREGISTERED,
		GetLoginsByProjectIdStatusINPROGRESS,
		GetLoginsByProjectIdStatusINREVIEWS,
		GetLoginsByProjectIdStatusACCEPTED,
		GetLoginsByProjectIdStatusFAILED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetLoginsByProjectIdStatus) MarshalText() ([]byte, error) {
	switch s {
	case GetLoginsByProjectIdStatusASSIGNED:
		return []byte(s), nil
	case GetLoginsByProjectIdStatusREGISTERED:
		return []byte(s), nil
	case GetLoginsByProjectIdStatusINPROGRESS:
		return []byte(s), nil
	case GetLoginsByProjectIdStatusINREVIEWS:
		return []byte(s), nil
	case GetLoginsByProjectIdStatusACCEPTED:
		return []byte(s), nil
	case GetLoginsByProjectIdStatusFAILED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetLoginsByProjectIdStatus) UnmarshalText(data []byte) error {
	switch GetLoginsByProjectIdStatus(data) {
	case GetLoginsByProjectIdStatusASSIGNED:
		*s = GetLoginsByProjectIdStatusASSIGNED
		return nil
	case GetLoginsByProjectIdStatusREGISTERED:
		*s = GetLoginsByProjectIdStatusREGISTERED
		return nil
	case GetLoginsByProjectIdStatusINPROGRESS:
		*s = GetLoginsByProjectIdStatusINPROGRESS
		return nil
	case GetLoginsByProjectIdStatusINREVIEWS:
		*s = GetLoginsByProjectIdStatusINREVIEWS
		return nil
	case GetLoginsByProjectIdStatusACCEPTED:
		*s = GetLoginsByProjectIdStatusACCEPTED
		return nil
	case GetLoginsByProjectIdStatusFAILED:
		*s = GetLoginsByProjectIdStatusFAILED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// GetLoginsByProjectIdTooManyRequests is response for GetLoginsByProjectId operation.
type GetLoginsByProjectIdTooManyRequests struct{}

func (*GetLoginsByProjectIdTooManyRequests) getLoginsByProjectIdRes() {}

// GetLoginsByProjectIdUnauthorized is response for GetLoginsByProjectId operation.
type GetLoginsByProjectIdUnauthorized struct{}

func (*GetLoginsByProjectIdUnauthorized) getLoginsByProjectIdRes() {}

type GetParticipantByLoginBadRequest ErrorResponseDTO

func (*GetParticipantByLoginBadRequest) getParticipantByLoginRes() {}

type GetParticipantByLoginForbidden ErrorResponseDTO

func (*GetParticipantByLoginForbidden) getParticipantByLoginRes() {}

type GetParticipantByLoginInternalServerError ErrorResponseDTO

func (*GetParticipantByLoginInternalServerError) getParticipantByLoginRes() {}

type GetParticipantByLoginNotFound ErrorResponseDTO

func (*GetParticipantByLoginNotFound) getParticipantByLoginRes() {}

// GetParticipantByLoginTooManyRequests is response for GetParticipantByLogin operation.
type GetParticipantByLoginTooManyRequests struct{}

func (*GetParticipantByLoginTooManyRequests) getParticipantByLoginRes() {}

// GetParticipantByLoginUnauthorized is response for GetParticipantByLogin operation.
type GetParticipantByLoginUnauthorized struct{}

func (*GetParticipantByLoginUnauthorized) getParticipantByLoginRes() {}

type GetParticipantCourseByLoginAndCourseIdBadRequest ErrorResponseDTO

func (*GetParticipantCourseByLoginAndCourseIdBadRequest) getParticipantCourseByLoginAndCourseIdRes() {
}

type GetParticipantCourseByLoginAndCourseIdForbidden ErrorResponseDTO

func (*GetParticipantCourseByLoginAndCourseIdForbidden) getParticipantCourseByLoginAndCourseIdRes() {}

type GetParticipantCourseByLoginAndCourseIdInternalServerError ErrorResponseDTO

func (*GetParticipantCourseByLoginAndCourseIdInternalServerError) getParticipantCourseByLoginAndCourseIdRes() {
}

type GetParticipantCourseByLoginAndCourseIdNotFound ErrorResponseDTO

func (*GetParticipantCourseByLoginAndCourseIdNotFound) getParticipantCourseByLoginAndCourseIdRes() {}

// GetParticipantCourseByLoginAndCourseIdTooManyRequests is response for GetParticipantCourseByLoginAndCourseId operation.
type GetParticipantCourseByLoginAndCourseIdTooManyRequests struct{}

func (*GetParticipantCourseByLoginAndCourseIdTooManyRequests) getParticipantCourseByLoginAndCourseIdRes() {
}

// GetParticipantCourseByLoginAndCourseIdUnauthorized is response for GetParticipantCourseByLoginAndCourseId operation.
type GetParticipantCourseByLoginAndCourseIdUnauthorized struct{}

func (*GetParticipantCourseByLoginAndCourseIdUnauthorized) getParticipantCourseByLoginAndCourseIdRes() {
}

type GetParticipantCoursesByLoginBadRequest ErrorResponseDTO

func (*GetParticipantCoursesByLoginBadRequest) getParticipantCoursesByLoginRes() {}

type GetParticipantCoursesByLoginForbidden ErrorResponseDTO

func (*GetParticipantCoursesByLoginForbidden) getParticipantCoursesByLoginRes() {}

type GetParticipantCoursesByLoginInternalServerError ErrorResponseDTO

func (*GetParticipantCoursesByLoginInternalServerError) getParticipantCoursesByLoginRes() {}

type GetParticipantCoursesByLoginNotFound ErrorResponseDTO

func (*GetParticipantCoursesByLoginNotFound) getParticipantCoursesByLoginRes() {}

type GetParticipantCoursesByLoginStatus string

const (
	GetParticipantCoursesByLoginStatusASSIGNED   GetParticipantCoursesByLoginStatus = "ASSIGNED"
	GetParticipantCoursesByLoginStatusREGISTERED GetParticipantCoursesByLoginStatus = "REGISTERED"
	GetParticipantCoursesByLoginStatusINPROGRESS GetParticipantCoursesByLoginStatus = "IN_PROGRESS"
	GetParticipantCoursesByLoginStatusACCEPTED   GetParticipantCoursesByLoginStatus = "ACCEPTED"
	GetParticipantCoursesByLoginStatusFAILED     GetParticipantCoursesByLoginStatus = "FAILED"
)

// AllValues returns all GetParticipantCoursesByLoginStatus values.
func (GetParticipantCoursesByLoginStatus) AllValues() []GetParticipantCoursesByLoginStatus {
	return []GetParticipantCoursesByLoginStatus{
		GetParticipantCoursesByLoginStatusASSIGNED,
		GetParticipantCoursesByLoginStatusREGISTERED,
		GetParticipantCoursesByLoginStatusINPROGRESS,
		GetParticipantCoursesByLoginStatusACCEPTED,
		GetParticipantCoursesByLoginStatusFAILED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetParticipantCoursesByLoginStatus) MarshalText() ([]byte, error) {
	switch s {
	case GetParticipantCoursesByLoginStatusASSIGNED:
		return []byte(s), nil
	case GetParticipantCoursesByLoginStatusREGISTERED:
		return []byte(s), nil
	case GetParticipantCoursesByLoginStatusINPROGRESS:
		return []byte(s), nil
	case GetParticipantCoursesByLoginStatusACCEPTED:
		return []byte(s), nil
	case GetParticipantCoursesByLoginStatusFAILED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetParticipantCoursesByLoginStatus) UnmarshalText(data []byte) error {
	switch GetParticipantCoursesByLoginStatus(data) {
	case GetParticipantCoursesByLoginStatusASSIGNED:
		*s = GetParticipantCoursesByLoginStatusASSIGNED
		return nil
	case GetParticipantCoursesByLoginStatusREGISTERED:
		*s = GetParticipantCoursesByLoginStatusREGISTERED
		return nil
	case GetParticipantCoursesByLoginStatusINPROGRESS:
		*s = GetParticipantCoursesByLoginStatusINPROGRESS
		return nil
	case GetParticipantCoursesByLoginStatusACCEPTED:
		*s = GetParticipantCoursesByLoginStatusACCEPTED
		return nil
	case GetParticipantCoursesByLoginStatusFAILED:
		*s = GetParticipantCoursesByLoginStatusFAILED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// GetParticipantCoursesByLoginTooManyRequests is response for GetParticipantCoursesByLogin operation.
type GetParticipantCoursesByLoginTooManyRequests struct{}

func (*GetParticipantCoursesByLoginTooManyRequests) getParticipantCoursesByLoginRes() {}

// GetParticipantCoursesByLoginUnauthorized is response for GetParticipantCoursesByLogin operation.
type GetParticipantCoursesByLoginUnauthorized struct{}

func (*GetParticipantCoursesByLoginUnauthorized) getParticipantCoursesByLoginRes() {}

type GetParticipantFeedbackByLoginBadRequest ErrorResponseDTO

func (*GetParticipantFeedbackByLoginBadRequest) getParticipantFeedbackByLoginRes() {}

type GetParticipantFeedbackByLoginForbidden ErrorResponseDTO

func (*GetParticipantFeedbackByLoginForbidden) getParticipantFeedbackByLoginRes() {}

type GetParticipantFeedbackByLoginInternalServerError ErrorResponseDTO

func (*GetParticipantFeedbackByLoginInternalServerError) getParticipantFeedbackByLoginRes() {}

type GetParticipantFeedbackByLoginNotFound ErrorResponseDTO

func (*GetParticipantFeedbackByLoginNotFound) getParticipantFeedbackByLoginRes() {}

// GetParticipantFeedbackByLoginTooManyRequests is response for GetParticipantFeedbackByLogin operation.
type GetParticipantFeedbackByLoginTooManyRequests struct{}

func (*GetParticipantFeedbackByLoginTooManyRequests) getParticipantFeedbackByLoginRes() {}

// GetParticipantFeedbackByLoginUnauthorized is response for GetParticipantFeedbackByLogin operation.
type GetParticipantFeedbackByLoginUnauthorized struct{}

func (*GetParticipantFeedbackByLoginUnauthorized) getParticipantFeedbackByLoginRes() {}

type GetParticipantProjectByLoginAndProjectIdBadRequest ErrorResponseDTO

func (*GetParticipantProjectByLoginAndProjectIdBadRequest) getParticipantProjectByLoginAndProjectIdRes() {
}

type GetParticipantProjectByLoginAndProjectIdForbidden ErrorResponseDTO

func (*GetParticipantProjectByLoginAndProjectIdForbidden) getParticipantProjectByLoginAndProjectIdRes() {
}

type GetParticipantProjectByLoginAndProjectIdInternalServerError ErrorResponseDTO

func (*GetParticipantProjectByLoginAndProjectIdInternalServerError) getParticipantProjectByLoginAndProjectIdRes() {
}

type GetParticipantProjectByLoginAndProjectIdNotFound ErrorResponseDTO

func (*GetParticipantProjectByLoginAndProjectIdNotFound) getParticipantProjectByLoginAndProjectIdRes() {
}

// GetParticipantProjectByLoginAndProjectIdTooManyRequests is response for GetParticipantProjectByLoginAndProjectId operation.
type GetParticipantProjectByLoginAndProjectIdTooManyRequests struct{}

func (*GetParticipantProjectByLoginAndProjectIdTooManyRequests) getParticipantProjectByLoginAndProjectIdRes() {
}

// GetParticipantProjectByLoginAndProjectIdUnauthorized is response for GetParticipantProjectByLoginAndProjectId operation.
type GetParticipantProjectByLoginAndProjectIdUnauthorized struct{}

func (*GetParticipantProjectByLoginAndProjectIdUnauthorized) getParticipantProjectByLoginAndProjectIdRes() {
}

type GetParticipantProjectsByLoginBadRequest ErrorResponseDTO

func (*GetParticipantProjectsByLoginBadRequest) getParticipantProjectsByLoginRes() {}

type GetParticipantProjectsByLoginForbidden ErrorResponseDTO

func (*GetParticipantProjectsByLoginForbidden) getParticipantProjectsByLoginRes() {}

type GetParticipantProjectsByLoginInternalServerError ErrorResponseDTO

func (*GetParticipantProjectsByLoginInternalServerError) getParticipantProjectsByLoginRes() {}

type GetParticipantProjectsByLoginNotFound ErrorResponseDTO

func (*GetParticipantProjectsByLoginNotFound) getParticipantProjectsByLoginRes() {}

type GetParticipantProjectsByLoginStatus string

const (
	GetParticipantProjectsByLoginStatusASSIGNED   GetParticipantProjectsByLoginStatus = "ASSIGNED"
	GetParticipantProjectsByLoginStatusREGISTERED GetParticipantProjectsByLoginStatus = "REGISTERED"
	GetParticipantProjectsByLoginStatusINPROGRESS GetParticipantProjectsByLoginStatus = "IN_PROGRESS"
	GetParticipantProjectsByLoginStatusINREVIEWS  GetParticipantProjectsByLoginStatus = "IN_REVIEWS"
	GetParticipantProjectsByLoginStatusACCEPTED   GetParticipantProjectsByLoginStatus = "ACCEPTED"
	GetParticipantProjectsByLoginStatusFAILED     GetParticipantProjectsByLoginStatus = "FAILED"
)

// AllValues returns all GetParticipantProjectsByLoginStatus values.
func (GetParticipantProjectsByLoginStatus) AllValues() []GetParticipantProjectsByLoginStatus {
	return []GetParticipantProjectsByLoginStatus{
		GetParticipantProjectsByLoginStatusASSIGNED,
		GetParticipantProjectsByLoginStatusREGISTERED,
		GetParticipantProjectsByLoginStatusINPROGRESS,
		GetParticipantProjectsByLoginStatusINREVIEWS,
		GetParticipantProjectsByLoginStatusACCEPTED,
		GetParticipantProjectsByLoginStatusFAILED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetParticipantProjectsByLoginStatus) MarshalText() ([]byte, error) {
	switch s {
	case GetParticipantProjectsByLoginStatusASSIGNED:
		return []byte(s), nil
	case GetParticipantProjectsByLoginStatusREGISTERED:
		return []byte(s), nil
	case GetParticipantProjectsByLoginStatusINPROGRESS:
		return []byte(s), nil
	case GetParticipantProjectsByLoginStatusINREVIEWS:
		return []byte(s), nil
	case GetParticipantProjectsByLoginStatusACCEPTED:
		return []byte(s), nil
	case GetParticipantProjectsByLoginStatusFAILED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetParticipantProjectsByLoginStatus) UnmarshalText(data []byte) error {
	switch GetParticipantProjectsByLoginStatus(data) {
	case GetParticipantProjectsByLoginStatusASSIGNED:
		*s = GetParticipantProjectsByLoginStatusASSIGNED
		return nil
	case GetParticipantProjectsByLoginStatusREGISTERED:
		*s = GetParticipantProjectsByLoginStatusREGISTERED
		return nil
	case GetParticipantProjectsByLoginStatusINPROGRESS:
		*s = GetParticipantProjectsByLoginStatusINPROGRESS
		return nil
	case GetParticipantProjectsByLoginStatusINREVIEWS:
		*s = GetParticipantProjectsByLoginStatusINREVIEWS
		return nil
	case GetParticipantProjectsByLoginStatusACCEPTED:
		*s = GetParticipantProjectsByLoginStatusACCEPTED
		return nil
	case GetParticipantProjectsByLoginStatusFAILED:
		*s = GetParticipantProjectsByLoginStatusFAILED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// GetParticipantProjectsByLoginTooManyRequests is response for GetParticipantProjectsByLogin operation.
type GetParticipantProjectsByLoginTooManyRequests struct{}

func (*GetParticipantProjectsByLoginTooManyRequests) getParticipantProjectsByLoginRes() {}

// GetParticipantProjectsByLoginUnauthorized is response for GetParticipantProjectsByLogin operation.
type GetParticipantProjectsByLoginUnauthorized struct{}

func (*GetParticipantProjectsByLoginUnauthorized) getParticipantProjectsByLoginRes() {}

type GetParticipantWorkstationByLoginBadRequest ErrorResponseDTO

func (*GetParticipantWorkstationByLoginBadRequest) getParticipantWorkstationByLoginRes() {}

type GetParticipantWorkstationByLoginForbidden ErrorResponseDTO

func (*GetParticipantWorkstationByLoginForbidden) getParticipantWorkstationByLoginRes() {}

type GetParticipantWorkstationByLoginInternalServerError ErrorResponseDTO

func (*GetParticipantWorkstationByLoginInternalServerError) getParticipantWorkstationByLoginRes() {}

type GetParticipantWorkstationByLoginNotFound ErrorResponseDTO

func (*GetParticipantWorkstationByLoginNotFound) getParticipantWorkstationByLoginRes() {}

// GetParticipantWorkstationByLoginTooManyRequests is response for GetParticipantWorkstationByLogin operation.
type GetParticipantWorkstationByLoginTooManyRequests struct{}

func (*GetParticipantWorkstationByLoginTooManyRequests) getParticipantWorkstationByLoginRes() {}

// GetParticipantWorkstationByLoginUnauthorized is response for GetParticipantWorkstationByLogin operation.
type GetParticipantWorkstationByLoginUnauthorized struct{}

func (*GetParticipantWorkstationByLoginUnauthorized) getParticipantWorkstationByLoginRes() {}

type GetParticipantsByCampusIdBadRequest ErrorResponseDTO

func (*GetParticipantsByCampusIdBadRequest) getParticipantsByCampusIdRes() {}

type GetParticipantsByCampusIdForbidden ErrorResponseDTO

func (*GetParticipantsByCampusIdForbidden) getParticipantsByCampusIdRes() {}

type GetParticipantsByCampusIdInternalServerError ErrorResponseDTO

func (*GetParticipantsByCampusIdInternalServerError) getParticipantsByCampusIdRes() {}

type GetParticipantsByCampusIdNotFound ErrorResponseDTO

func (*GetParticipantsByCampusIdNotFound) getParticipantsByCampusIdRes() {}

// GetParticipantsByCampusIdTooManyRequests is response for GetParticipantsByCampusId operation.
type GetParticipantsByCampusIdTooManyRequests struct{}

func (*GetParticipantsByCampusIdTooManyRequests) getParticipantsByCampusIdRes() {}

// GetParticipantsByCampusIdUnauthorized is response for GetParticipantsByCampusId operation.
type GetParticipantsByCampusIdUnauthorized struct{}

func (*GetParticipantsByCampusIdUnauthorized) getParticipantsByCampusIdRes() {}

type GetParticipantsByCoalitionId1BadRequest ErrorResponseDTO

func (*GetParticipantsByCoalitionId1BadRequest) getParticipantsByCoalitionId1Res() {}

type GetParticipantsByCoalitionId1InternalServerError ErrorResponseDTO

func (*GetParticipantsByCoalitionId1InternalServerError) getParticipantsByCoalitionId1Res() {}

// GetParticipantsByCoalitionId1NotFound is response for GetParticipantsByCoalitionId1 operation.
type GetParticipantsByCoalitionId1NotFound struct{}

func (*GetParticipantsByCoalitionId1NotFound) getParticipantsByCoalitionId1Res() {}

// GetParticipantsByCoalitionId1TooManyRequests is response for GetParticipantsByCoalitionId1 operation.
type GetParticipantsByCoalitionId1TooManyRequests struct{}

func (*GetParticipantsByCoalitionId1TooManyRequests) getParticipantsByCoalitionId1Res() {}

// GetParticipantsByCoalitionId1Unauthorized is response for GetParticipantsByCoalitionId1 operation.
type GetParticipantsByCoalitionId1Unauthorized struct{}

func (*GetParticipantsByCoalitionId1Unauthorized) getParticipantsByCoalitionId1Res() {}

type GetParticipantsByCoalitionIdBadRequest ErrorResponseDTO

func (*GetParticipantsByCoalitionIdBadRequest) getParticipantsByCoalitionIdRes() {}

type GetParticipantsByCoalitionIdInternalServerError ErrorResponseDTO

func (*GetParticipantsByCoalitionIdInternalServerError) getParticipantsByCoalitionIdRes() {}

// GetParticipantsByCoalitionIdNotFound is response for GetParticipantsByCoalitionId operation.
type GetParticipantsByCoalitionIdNotFound struct{}

func (*GetParticipantsByCoalitionIdNotFound) getParticipantsByCoalitionIdRes() {}

// GetParticipantsByCoalitionIdTooManyRequests is response for GetParticipantsByCoalitionId operation.
type GetParticipantsByCoalitionIdTooManyRequests struct{}

func (*GetParticipantsByCoalitionIdTooManyRequests) getParticipantsByCoalitionIdRes() {}

// GetParticipantsByCoalitionIdUnauthorized is response for GetParticipantsByCoalitionId operation.
type GetParticipantsByCoalitionIdUnauthorized struct{}

func (*GetParticipantsByCoalitionIdUnauthorized) getParticipantsByCoalitionIdRes() {}

type GetPointsByLoginBadRequest ErrorResponseDTO

func (*GetPointsByLoginBadRequest) getPointsByLoginRes() {}

type GetPointsByLoginForbidden ErrorResponseDTO

func (*GetPointsByLoginForbidden) getPointsByLoginRes() {}

type GetPointsByLoginInternalServerError ErrorResponseDTO

func (*GetPointsByLoginInternalServerError) getPointsByLoginRes() {}

type GetPointsByLoginNotFound ErrorResponseDTO

func (*GetPointsByLoginNotFound) getPointsByLoginRes() {}

// GetPointsByLoginTooManyRequests is response for GetPointsByLogin operation.
type GetPointsByLoginTooManyRequests struct{}

func (*GetPointsByLoginTooManyRequests) getPointsByLoginRes() {}

// GetPointsByLoginUnauthorized is response for GetPointsByLogin operation.
type GetPointsByLoginUnauthorized struct{}

func (*GetPointsByLoginUnauthorized) getPointsByLoginRes() {}

type GetProjectByProjectIdBadRequest ErrorResponseDTO

func (*GetProjectByProjectIdBadRequest) getProjectByProjectIdRes() {}

type GetProjectByProjectIdForbidden ErrorResponseDTO

func (*GetProjectByProjectIdForbidden) getProjectByProjectIdRes() {}

type GetProjectByProjectIdInternalServerError ErrorResponseDTO

func (*GetProjectByProjectIdInternalServerError) getProjectByProjectIdRes() {}

type GetProjectByProjectIdNotFound ErrorResponseDTO

func (*GetProjectByProjectIdNotFound) getProjectByProjectIdRes() {}

// GetProjectByProjectIdTooManyRequests is response for GetProjectByProjectId operation.
type GetProjectByProjectIdTooManyRequests struct{}

func (*GetProjectByProjectIdTooManyRequests) getProjectByProjectIdRes() {}

// GetProjectByProjectIdUnauthorized is response for GetProjectByProjectId operation.
type GetProjectByProjectIdUnauthorized struct{}

func (*GetProjectByProjectIdUnauthorized) getProjectByProjectIdRes() {}

type GetSalesBadRequest ErrorResponseDTO

func (*GetSalesBadRequest) getSalesRes() {}

type GetSalesInternalServerError ErrorResponseDTO

func (*GetSalesInternalServerError) getSalesRes() {}

// GetSalesTooManyRequests is response for GetSales operation.
type GetSalesTooManyRequests struct{}

func (*GetSalesTooManyRequests) getSalesRes() {}

// GetSalesUnauthorized is response for GetSales operation.
type GetSalesUnauthorized struct{}

func (*GetSalesUnauthorized) getSalesRes() {}

type GetSoftSkillByLoginBadRequest ErrorResponseDTO

func (*GetSoftSkillByLoginBadRequest) getSoftSkillByLoginRes() {}

type GetSoftSkillByLoginForbidden ErrorResponseDTO

func (*GetSoftSkillByLoginForbidden) getSoftSkillByLoginRes() {}

type GetSoftSkillByLoginInternalServerError ErrorResponseDTO

func (*GetSoftSkillByLoginInternalServerError) getSoftSkillByLoginRes() {}

type GetSoftSkillByLoginNotFound ErrorResponseDTO

func (*GetSoftSkillByLoginNotFound) getSoftSkillByLoginRes() {}

// GetSoftSkillByLoginTooManyRequests is response for GetSoftSkillByLogin operation.
type GetSoftSkillByLoginTooManyRequests struct{}

func (*GetSoftSkillByLoginTooManyRequests) getSoftSkillByLoginRes() {}

// GetSoftSkillByLoginUnauthorized is response for GetSoftSkillByLogin operation.
type GetSoftSkillByLoginUnauthorized struct{}

func (*GetSoftSkillByLoginUnauthorized) getSoftSkillByLoginRes() {}

type GetXpHistoryByLoginBadRequest ErrorResponseDTO

func (*GetXpHistoryByLoginBadRequest) getXpHistoryByLoginRes() {}

type GetXpHistoryByLoginForbidden ErrorResponseDTO

func (*GetXpHistoryByLoginForbidden) getXpHistoryByLoginRes() {}

type GetXpHistoryByLoginInternalServerError ErrorResponseDTO

func (*GetXpHistoryByLoginInternalServerError) getXpHistoryByLoginRes() {}

type GetXpHistoryByLoginNotFound ErrorResponseDTO

func (*GetXpHistoryByLoginNotFound) getXpHistoryByLoginRes() {}

// GetXpHistoryByLoginTooManyRequests is response for GetXpHistoryByLogin operation.
type GetXpHistoryByLoginTooManyRequests struct{}

func (*GetXpHistoryByLoginTooManyRequests) getXpHistoryByLoginRes() {}

// GetXpHistoryByLoginUnauthorized is response for GetXpHistoryByLogin operation.
type GetXpHistoryByLoginUnauthorized struct{}

func (*GetXpHistoryByLoginUnauthorized) getXpHistoryByLoginRes() {}

// Graph edge.
// Ref: #/components/schemas/GraphEdgeV1DTO
type GraphEdgeV1DTO struct {
	// Edge ID.
	ID string `json:"id"`
	// Source node ID.
	Source string `json:"source"`
	// Target node ID.
	Target string `json:"target"`
	// Source handle ID.
	SourceHandle string `json:"sourceHandle"`
	// Target handle ID.
	TargetHandle string `json:"targetHandle"`
}

// GetID returns the value of ID.
func (s *GraphEdgeV1DTO) GetID() string {
	return s.ID
}

// GetSource returns the value of Source.
func (s *GraphEdgeV1DTO) GetSource() string {
	return s.Source
}

// GetTarget returns the value of Target.
func (s *GraphEdgeV1DTO) GetTarget() string {
	return s.Target
}

// GetSourceHandle returns the value of SourceHandle.
func (s *GraphEdgeV1DTO) GetSourceHandle() string {
	return s.SourceHandle
}

// GetTargetHandle returns the value of TargetHandle.
func (s *GraphEdgeV1DTO) GetTargetHandle() string {
	return s.TargetHandle
}

// SetID sets the value of ID.
func (s *GraphEdgeV1DTO) SetID(val string) {
	s.ID = val
}

// SetSource sets the value of Source.
func (s *GraphEdgeV1DTO) SetSource(val string) {
	s.Source = val
}

// SetTarget sets the value of Target.
func (s *GraphEdgeV1DTO) SetTarget(val string) {
	s.Target = val
}

// SetSourceHandle sets the value of SourceHandle.
func (s *GraphEdgeV1DTO) SetSourceHandle(val string) {
	s.SourceHandle = val
}

// SetTargetHandle sets the value of TargetHandle.
func (s *GraphEdgeV1DTO) SetTargetHandle(val string) {
	s.TargetHandle = val
}

// Graph node item.
// Ref: #/components/schemas/GraphNodeItemV1DTO
type GraphNodeItemV1DTO struct {
	// Node item ID.
	ID string `json:"id"`
	// Node item code in the graph.
	Code string `json:"code"`
	// Handles for connecting node items.
	Handles []string `json:"handles"`
	// Node item type.
	EntityType GraphNodeItemV1DTOEntityType `json:"entityType"`
	// ID of the entity linked to the node item.
	EntityId int64 `json:"entityId"`
}

// GetID returns the value of ID.
func (s *GraphNodeItemV1DTO) GetID() string {
	return s.ID
}

// GetCode returns the value of Code.
func (s *GraphNodeItemV1DTO) GetCode() string {
	return s.Code
}

// GetHandles returns the value of Handles.
func (s *GraphNodeItemV1DTO) GetHandles() []string {
	return s.Handles
}

// GetEntityType returns the value of EntityType.
func (s *GraphNodeItemV1DTO) GetEntityType() GraphNodeItemV1DTOEntityType {
	return s.EntityType
}

// GetEntityId returns the value of EntityId.
func (s *GraphNodeItemV1DTO) GetEntityId() int64 {
	return s.EntityId
}

// SetID sets the value of ID.
func (s *GraphNodeItemV1DTO) SetID(val string) {
	s.ID = val
}

// SetCode sets the value of Code.
func (s *GraphNodeItemV1DTO) SetCode(val string) {
	s.Code = val
}

// SetHandles sets the value of Handles.
func (s *GraphNodeItemV1DTO) SetHandles(val []string) {
	s.Handles = val
}

// SetEntityType sets the value of EntityType.
func (s *GraphNodeItemV1DTO) SetEntityType(val GraphNodeItemV1DTOEntityType) {
	s.EntityType = val
}

// SetEntityId sets the value of EntityId.
func (s *GraphNodeItemV1DTO) SetEntityId(val int64) {
	s.EntityId = val
}

// Node item type.
type GraphNodeItemV1DTOEntityType string

const (
	GraphNodeItemV1DTOEntityTypePROJECT GraphNodeItemV1DTOEntityType = "PROJECT"
	GraphNodeItemV1DTOEntityTypeCOURSE  GraphNodeItemV1DTOEntityType = "COURSE"
)

// AllValues returns all GraphNodeItemV1DTOEntityType values.
func (GraphNodeItemV1DTOEntityType) AllValues() []GraphNodeItemV1DTOEntityType {
	return []GraphNodeItemV1DTOEntityType{
		GraphNodeItemV1DTOEntityTypePROJECT,
		GraphNodeItemV1DTOEntityTypeCOURSE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GraphNodeItemV1DTOEntityType) MarshalText() ([]byte, error) {
	switch s {
	case GraphNodeItemV1DTOEntityTypePROJECT:
		return []byte(s), nil
	case GraphNodeItemV1DTOEntityTypeCOURSE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GraphNodeItemV1DTOEntityType) UnmarshalText(data []byte) error {
	switch GraphNodeItemV1DTOEntityType(data) {
	case GraphNodeItemV1DTOEntityTypePROJECT:
		*s = GraphNodeItemV1DTOEntityTypePROJECT
		return nil
	case GraphNodeItemV1DTOEntityTypeCOURSE:
		*s = GraphNodeItemV1DTOEntityTypeCOURSE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Graph node.
// Ref: #/components/schemas/GraphNodeV1DTO
type GraphNodeV1DTO struct {
	// Node ID.
	ID string `json:"id"`
	// Node name.
	Label string `json:"label"`
	// Node items.
	Items []GraphNodeItemV1DTO `json:"items"`
}

// GetID returns the value of ID.
func (s *GraphNodeV1DTO) GetID() string {
	return s.ID
}

// GetLabel returns the value of Label.
func (s *GraphNodeV1DTO) GetLabel() string {
	return s.Label
}

// GetItems returns the value of Items.
func (s *GraphNodeV1DTO) GetItems() []GraphNodeItemV1DTO {
	return s.Items
}

// SetID sets the value of ID.
func (s *GraphNodeV1DTO) SetID(val string) {
	s.ID = val
}

// SetLabel sets the value of Label.
func (s *GraphNodeV1DTO) SetLabel(val string) {
	s.Label = val
}

// SetItems sets the value of Items.
func (s *GraphNodeV1DTO) SetItems(val []GraphNodeItemV1DTO) {
	s.Items = val
}

// Graph.
// Ref: #/components/schemas/GraphV1DTO
type GraphV1DTO struct {
	// Array of graph nodes.
	Nodes []GraphNodeV1DTO `json:"nodes"`
	// Array of graph edges.
	Edges []GraphEdgeV1DTO `json:"edges"`
}

// GetNodes returns the value of Nodes.
func (s *GraphV1DTO) GetNodes() []GraphNodeV1DTO {
	return s.Nodes
}

// GetEdges returns the value of Edges.
func (s *GraphV1DTO) GetEdges() []GraphEdgeV1DTO {
	return s.Edges
}

// SetNodes sets the value of Nodes.
func (s *GraphV1DTO) SetNodes(val []GraphNodeV1DTO) {
	s.Nodes = val
}

// SetEdges sets the value of Edges.
func (s *GraphV1DTO) SetEdges(val []GraphEdgeV1DTO) {
	s.Edges = val
}

func (*GraphV1DTO) getGraphRes() {}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptConditionRuleGroupV1DTOLogicalOperator returns new OptConditionRuleGroupV1DTOLogicalOperator with value set to v.
func NewOptConditionRuleGroupV1DTOLogicalOperator(v ConditionRuleGroupV1DTOLogicalOperator) OptConditionRuleGroupV1DTOLogicalOperator {
	return OptConditionRuleGroupV1DTOLogicalOperator{
		Value: v,
		Set:   true,
	}
}

// OptConditionRuleGroupV1DTOLogicalOperator is optional ConditionRuleGroupV1DTOLogicalOperator.
type OptConditionRuleGroupV1DTOLogicalOperator struct {
	Value ConditionRuleGroupV1DTOLogicalOperator
	Set   bool
}

// IsSet returns true if OptConditionRuleGroupV1DTOLogicalOperator was set.
func (o OptConditionRuleGroupV1DTOLogicalOperator) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptConditionRuleGroupV1DTOLogicalOperator) Reset() {
	var v ConditionRuleGroupV1DTOLogicalOperator
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptConditionRuleGroupV1DTOLogicalOperator) SetTo(v ConditionRuleGroupV1DTOLogicalOperator) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptConditionRuleGroupV1DTOLogicalOperator) Get() (v ConditionRuleGroupV1DTOLogicalOperator, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptConditionRuleGroupV1DTOLogicalOperator) Or(d ConditionRuleGroupV1DTOLogicalOperator) ConditionRuleGroupV1DTOLogicalOperator {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptConditionRuleV1DTOLogicalOperator returns new OptConditionRuleV1DTOLogicalOperator with value set to v.
func NewOptConditionRuleV1DTOLogicalOperator(v ConditionRuleV1DTOLogicalOperator) OptConditionRuleV1DTOLogicalOperator {
	return OptConditionRuleV1DTOLogicalOperator{
		Value: v,
		Set:   true,
	}
}

// OptConditionRuleV1DTOLogicalOperator is optional ConditionRuleV1DTOLogicalOperator.
type OptConditionRuleV1DTOLogicalOperator struct {
	Value ConditionRuleV1DTOLogicalOperator
	Set   bool
}

// IsSet returns true if OptConditionRuleV1DTOLogicalOperator was set.
func (o OptConditionRuleV1DTOLogicalOperator) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptConditionRuleV1DTOLogicalOperator) Reset() {
	var v ConditionRuleV1DTOLogicalOperator
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptConditionRuleV1DTOLogicalOperator) SetTo(v ConditionRuleV1DTOLogicalOperator) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptConditionRuleV1DTOLogicalOperator) Get() (v ConditionRuleV1DTOLogicalOperator, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptConditionRuleV1DTOLogicalOperator) Or(d ConditionRuleV1DTOLogicalOperator) ConditionRuleV1DTOLogicalOperator {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDate returns new OptDate with value set to v.
func NewOptDate(v time.Time) OptDate {
	return OptDate{
		Value: v,
		Set:   true,
	}
}

// OptDate is optional time.Time.
type OptDate struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDate was set.
func (o OptDate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDate) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDate) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDate) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDate) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat64 returns new OptFloat64 with value set to v.
func NewOptFloat64(v float64) OptFloat64 {
	return OptFloat64{
		Value: v,
		Set:   true,
	}
}

// OptFloat64 is optional float64.
type OptFloat64 struct {
	Value float64
	Set   bool
}

// IsSet returns true if OptFloat64 was set.
func (o OptFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat64) SetTo(v float64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat64) Get() (v float64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetEventsType returns new OptGetEventsType with value set to v.
func NewOptGetEventsType(v GetEventsType) OptGetEventsType {
	return OptGetEventsType{
		Value: v,
		Set:   true,
	}
}

// OptGetEventsType is optional GetEventsType.
type OptGetEventsType struct {
	Value GetEventsType
	Set   bool
}

// IsSet returns true if OptGetEventsType was set.
func (o OptGetEventsType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetEventsType) Reset() {
	var v GetEventsType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetEventsType) SetTo(v GetEventsType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetEventsType) Get() (v GetEventsType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetEventsType) Or(d GetEventsType) GetEventsType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetLoginsByProjectIdStatus returns new OptGetLoginsByProjectIdStatus with value set to v.
func NewOptGetLoginsByProjectIdStatus(v GetLoginsByProjectIdStatus) OptGetLoginsByProjectIdStatus {
	return OptGetLoginsByProjectIdStatus{
		Value: v,
		Set:   true,
	}
}

// OptGetLoginsByProjectIdStatus is optional GetLoginsByProjectIdStatus.
type OptGetLoginsByProjectIdStatus struct {
	Value GetLoginsByProjectIdStatus
	Set   bool
}

// IsSet returns true if OptGetLoginsByProjectIdStatus was set.
func (o OptGetLoginsByProjectIdStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetLoginsByProjectIdStatus) Reset() {
	var v GetLoginsByProjectIdStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetLoginsByProjectIdStatus) SetTo(v GetLoginsByProjectIdStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetLoginsByProjectIdStatus) Get() (v GetLoginsByProjectIdStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetLoginsByProjectIdStatus) Or(d GetLoginsByProjectIdStatus) GetLoginsByProjectIdStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetParticipantCoursesByLoginStatus returns new OptGetParticipantCoursesByLoginStatus with value set to v.
func NewOptGetParticipantCoursesByLoginStatus(v GetParticipantCoursesByLoginStatus) OptGetParticipantCoursesByLoginStatus {
	return OptGetParticipantCoursesByLoginStatus{
		Value: v,
		Set:   true,
	}
}

// OptGetParticipantCoursesByLoginStatus is optional GetParticipantCoursesByLoginStatus.
type OptGetParticipantCoursesByLoginStatus struct {
	Value GetParticipantCoursesByLoginStatus
	Set   bool
}

// IsSet returns true if OptGetParticipantCoursesByLoginStatus was set.
func (o OptGetParticipantCoursesByLoginStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetParticipantCoursesByLoginStatus) Reset() {
	var v GetParticipantCoursesByLoginStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetParticipantCoursesByLoginStatus) SetTo(v GetParticipantCoursesByLoginStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetParticipantCoursesByLoginStatus) Get() (v GetParticipantCoursesByLoginStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetParticipantCoursesByLoginStatus) Or(d GetParticipantCoursesByLoginStatus) GetParticipantCoursesByLoginStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetParticipantProjectsByLoginStatus returns new OptGetParticipantProjectsByLoginStatus with value set to v.
func NewOptGetParticipantProjectsByLoginStatus(v GetParticipantProjectsByLoginStatus) OptGetParticipantProjectsByLoginStatus {
	return OptGetParticipantProjectsByLoginStatus{
		Value: v,
		Set:   true,
	}
}

// OptGetParticipantProjectsByLoginStatus is optional GetParticipantProjectsByLoginStatus.
type OptGetParticipantProjectsByLoginStatus struct {
	Value GetParticipantProjectsByLoginStatus
	Set   bool
}

// IsSet returns true if OptGetParticipantProjectsByLoginStatus was set.
func (o OptGetParticipantProjectsByLoginStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetParticipantProjectsByLoginStatus) Reset() {
	var v GetParticipantProjectsByLoginStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetParticipantProjectsByLoginStatus) SetTo(v GetParticipantProjectsByLoginStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetParticipantProjectsByLoginStatus) Get() (v GetParticipantProjectsByLoginStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetParticipantProjectsByLoginStatus) Or(d GetParticipantProjectsByLoginStatus) GetParticipantProjectsByLoginStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt32 returns new OptInt32 with value set to v.
func NewOptInt32(v int32) OptInt32 {
	return OptInt32{
		Value: v,
		Set:   true,
	}
}

// OptInt32 is optional int32.
type OptInt32 struct {
	Value int32
	Set   bool
}

// IsSet returns true if OptInt32 was set.
func (o OptInt32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt32) Reset() {
	var v int32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt32) SetTo(v int32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt32) Get() (v int32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt32) Or(d int32) int32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt64 returns new OptInt64 with value set to v.
func NewOptInt64(v int64) OptInt64 {
	return OptInt64{
		Value: v,
		Set:   true,
	}
}

// OptInt64 is optional int64.
type OptInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptInt64 was set.
func (o OptInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUUID returns new OptUUID with value set to v.
func NewOptUUID(v uuid.UUID) OptUUID {
	return OptUUID{
		Value: v,
		Set:   true,
	}
}

// OptUUID is optional uuid.UUID.
type OptUUID struct {
	Value uuid.UUID
	Set   bool
}

// IsSet returns true if OptUUID was set.
func (o OptUUID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUUID) Reset() {
	var v uuid.UUID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUUID) SetTo(v uuid.UUID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUUID) Get() (v uuid.UUID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUUID) Or(d uuid.UUID) uuid.UUID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Participant Badge.
// Ref: #/components/schemas/ParticipantBadgeV1DTO
type ParticipantBadgeV1DTO struct {
	// Badge name.
	Name string `json:"name"`
	// Date and time of the receipt (UTC).
	ReceiptDateTime time.Time `json:"receiptDateTime"`
	// URL of the badge icon.
	IconUrl string `json:"iconUrl"`
}

// GetName returns the value of Name.
func (s *ParticipantBadgeV1DTO) GetName() string {
	return s.Name
}

// GetReceiptDateTime returns the value of ReceiptDateTime.
func (s *ParticipantBadgeV1DTO) GetReceiptDateTime() time.Time {
	return s.ReceiptDateTime
}

// GetIconUrl returns the value of IconUrl.
func (s *ParticipantBadgeV1DTO) GetIconUrl() string {
	return s.IconUrl
}

// SetName sets the value of Name.
func (s *ParticipantBadgeV1DTO) SetName(val string) {
	s.Name = val
}

// SetReceiptDateTime sets the value of ReceiptDateTime.
func (s *ParticipantBadgeV1DTO) SetReceiptDateTime(val time.Time) {
	s.ReceiptDateTime = val
}

// SetIconUrl sets the value of IconUrl.
func (s *ParticipantBadgeV1DTO) SetIconUrl(val string) {
	s.IconUrl = val
}

// Participant Badges.
// Ref: #/components/schemas/ParticipantBadgesV1DTO
type ParticipantBadgesV1DTO struct {
	// Array of badges.
	Badges []ParticipantBadgeV1DTO `json:"badges"`
}

// GetBadges returns the value of Badges.
func (s *ParticipantBadgesV1DTO) GetBadges() []ParticipantBadgeV1DTO {
	return s.Badges
}

// SetBadges sets the value of Badges.
func (s *ParticipantBadgesV1DTO) SetBadges(val []ParticipantBadgeV1DTO) {
	s.Badges = val
}

func (*ParticipantBadgesV1DTO) getBadgesByLoginRes() {}

// Participant Campus.
// Ref: #/components/schemas/ParticipantCampusV1DTO
type ParticipantCampusV1DTO struct {
	// Campus ID.
	ID uuid.UUID `json:"id"`
	// Short campus name.
	ShortName string `json:"shortName"`
}

// GetID returns the value of ID.
func (s *ParticipantCampusV1DTO) GetID() uuid.UUID {
	return s.ID
}

// GetShortName returns the value of ShortName.
func (s *ParticipantCampusV1DTO) GetShortName() string {
	return s.ShortName
}

// SetID sets the value of ID.
func (s *ParticipantCampusV1DTO) SetID(val uuid.UUID) {
	s.ID = val
}

// SetShortName sets the value of ShortName.
func (s *ParticipantCampusV1DTO) SetShortName(val string) {
	s.ShortName = val
}

// Participant Coalition.
// Ref: #/components/schemas/ParticipantCoalitionV1DTO
type ParticipantCoalitionV1DTO struct {
	// Coalition ID.
	CoalitionId int64 `json:"coalitionId"`
	// Coalition name.
	Name string `json:"name"`
	// Rank of the participant.
	Rank OptInt32 `json:"rank"`
}

// GetCoalitionId returns the value of CoalitionId.
func (s *ParticipantCoalitionV1DTO) GetCoalitionId() int64 {
	return s.CoalitionId
}

// GetName returns the value of Name.
func (s *ParticipantCoalitionV1DTO) GetName() string {
	return s.Name
}

// GetRank returns the value of Rank.
func (s *ParticipantCoalitionV1DTO) GetRank() OptInt32 {
	return s.Rank
}

// SetCoalitionId sets the value of CoalitionId.
func (s *ParticipantCoalitionV1DTO) SetCoalitionId(val int64) {
	s.CoalitionId = val
}

// SetName sets the value of Name.
func (s *ParticipantCoalitionV1DTO) SetName(val string) {
	s.Name = val
}

// SetRank sets the value of Rank.
func (s *ParticipantCoalitionV1DTO) SetRank(val OptInt32) {
	s.Rank = val
}

func (*ParticipantCoalitionV1DTO) getCoalitionByLoginRes() {}

// Participant Course.
// Ref: #/components/schemas/ParticipantCourseV1DTO
type ParticipantCourseV1DTO struct {
	// Course ID.
	ID int64 `json:"id"`
	// Course name.
	Title string `json:"title"`
	// Course status.
	Status ParticipantCourseV1DTOStatus `json:"status"`
	// Final percentage of completion.
	FinalPercentage OptInt32 `json:"finalPercentage"`
	// Date and time of the last completion (UTC).
	CompletionDateTime OptDateTime `json:"completionDateTime"`
}

// GetID returns the value of ID.
func (s *ParticipantCourseV1DTO) GetID() int64 {
	return s.ID
}

// GetTitle returns the value of Title.
func (s *ParticipantCourseV1DTO) GetTitle() string {
	return s.Title
}

// GetStatus returns the value of Status.
func (s *ParticipantCourseV1DTO) GetStatus() ParticipantCourseV1DTOStatus {
	return s.Status
}

// GetFinalPercentage returns the value of FinalPercentage.
func (s *ParticipantCourseV1DTO) GetFinalPercentage() OptInt32 {
	return s.FinalPercentage
}

// GetCompletionDateTime returns the value of CompletionDateTime.
func (s *ParticipantCourseV1DTO) GetCompletionDateTime() OptDateTime {
	return s.CompletionDateTime
}

// SetID sets the value of ID.
func (s *ParticipantCourseV1DTO) SetID(val int64) {
	s.ID = val
}

// SetTitle sets the value of Title.
func (s *ParticipantCourseV1DTO) SetTitle(val string) {
	s.Title = val
}

// SetStatus sets the value of Status.
func (s *ParticipantCourseV1DTO) SetStatus(val ParticipantCourseV1DTOStatus) {
	s.Status = val
}

// SetFinalPercentage sets the value of FinalPercentage.
func (s *ParticipantCourseV1DTO) SetFinalPercentage(val OptInt32) {
	s.FinalPercentage = val
}

// SetCompletionDateTime sets the value of CompletionDateTime.
func (s *ParticipantCourseV1DTO) SetCompletionDateTime(val OptDateTime) {
	s.CompletionDateTime = val
}

func (*ParticipantCourseV1DTO) getParticipantCourseByLoginAndCourseIdRes() {}

// Course status.
type ParticipantCourseV1DTOStatus string

const (
	ParticipantCourseV1DTOStatusASSIGNED   ParticipantCourseV1DTOStatus = "ASSIGNED"
	ParticipantCourseV1DTOStatusREGISTERED ParticipantCourseV1DTOStatus = "REGISTERED"
	ParticipantCourseV1DTOStatusINPROGRESS ParticipantCourseV1DTOStatus = "IN_PROGRESS"
	ParticipantCourseV1DTOStatusACCEPTED   ParticipantCourseV1DTOStatus = "ACCEPTED"
	ParticipantCourseV1DTOStatusFAILED     ParticipantCourseV1DTOStatus = "FAILED"
)

// AllValues returns all ParticipantCourseV1DTOStatus values.
func (ParticipantCourseV1DTOStatus) AllValues() []ParticipantCourseV1DTOStatus {
	return []ParticipantCourseV1DTOStatus{
		ParticipantCourseV1DTOStatusASSIGNED,
		ParticipantCourseV1DTOStatusREGISTERED,
		ParticipantCourseV1DTOStatusINPROGRESS,
		ParticipantCourseV1DTOStatusACCEPTED,
		ParticipantCourseV1DTOStatusFAILED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ParticipantCourseV1DTOStatus) MarshalText() ([]byte, error) {
	switch s {
	case ParticipantCourseV1DTOStatusASSIGNED:
		return []byte(s), nil
	case ParticipantCourseV1DTOStatusREGISTERED:
		return []byte(s), nil
	case ParticipantCourseV1DTOStatusINPROGRESS:
		return []byte(s), nil
	case ParticipantCourseV1DTOStatusACCEPTED:
		return []byte(s), nil
	case ParticipantCourseV1DTOStatusFAILED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ParticipantCourseV1DTOStatus) UnmarshalText(data []byte) error {
	switch ParticipantCourseV1DTOStatus(data) {
	case ParticipantCourseV1DTOStatusASSIGNED:
		*s = ParticipantCourseV1DTOStatusASSIGNED
		return nil
	case ParticipantCourseV1DTOStatusREGISTERED:
		*s = ParticipantCourseV1DTOStatusREGISTERED
		return nil
	case ParticipantCourseV1DTOStatusINPROGRESS:
		*s = ParticipantCourseV1DTOStatusINPROGRESS
		return nil
	case ParticipantCourseV1DTOStatusACCEPTED:
		*s = ParticipantCourseV1DTOStatusACCEPTED
		return nil
	case ParticipantCourseV1DTOStatusFAILED:
		*s = ParticipantCourseV1DTOStatusFAILED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Participant Courses.
// Ref: #/components/schemas/ParticipantCoursesV1DTO
type ParticipantCoursesV1DTO struct {
	// Array of courses.
	Courses []ParticipantCourseV1DTO `json:"courses"`
}

// GetCourses returns the value of Courses.
func (s *ParticipantCoursesV1DTO) GetCourses() []ParticipantCourseV1DTO {
	return s.Courses
}

// SetCourses sets the value of Courses.
func (s *ParticipantCoursesV1DTO) SetCourses(val []ParticipantCourseV1DTO) {
	s.Courses = val
}

func (*ParticipantCoursesV1DTO) getParticipantCoursesByLoginRes() {}

// Participant Feedback.
// Ref: #/components/schemas/ParticipantFeedbackV1DTO
type ParticipantFeedbackV1DTO struct {
	// Average punctuality score for a peer review.
	AverageVerifierPunctuality OptFloat64 `json:"averageVerifierPunctuality"`
	// Average interest score for a peer review.
	AverageVerifierInterest OptFloat64 `json:"averageVerifierInterest"`
	// Average thoroughness score for a peer review.
	AverageVerifierThoroughness OptFloat64 `json:"averageVerifierThoroughness"`
	// Average friendliness score for a peer review.
	AverageVerifierFriendliness OptFloat64 `json:"averageVerifierFriendliness"`
}

// GetAverageVerifierPunctuality returns the value of AverageVerifierPunctuality.
func (s *ParticipantFeedbackV1DTO) GetAverageVerifierPunctuality() OptFloat64 {
	return s.AverageVerifierPunctuality
}

// GetAverageVerifierInterest returns the value of AverageVerifierInterest.
func (s *ParticipantFeedbackV1DTO) GetAverageVerifierInterest() OptFloat64 {
	return s.AverageVerifierInterest
}

// GetAverageVerifierThoroughness returns the value of AverageVerifierThoroughness.
func (s *ParticipantFeedbackV1DTO) GetAverageVerifierThoroughness() OptFloat64 {
	return s.AverageVerifierThoroughness
}

// GetAverageVerifierFriendliness returns the value of AverageVerifierFriendliness.
func (s *ParticipantFeedbackV1DTO) GetAverageVerifierFriendliness() OptFloat64 {
	return s.AverageVerifierFriendliness
}

// SetAverageVerifierPunctuality sets the value of AverageVerifierPunctuality.
func (s *ParticipantFeedbackV1DTO) SetAverageVerifierPunctuality(val OptFloat64) {
	s.AverageVerifierPunctuality = val
}

// SetAverageVerifierInterest sets the value of AverageVerifierInterest.
func (s *ParticipantFeedbackV1DTO) SetAverageVerifierInterest(val OptFloat64) {
	s.AverageVerifierInterest = val
}

// SetAverageVerifierThoroughness sets the value of AverageVerifierThoroughness.
func (s *ParticipantFeedbackV1DTO) SetAverageVerifierThoroughness(val OptFloat64) {
	s.AverageVerifierThoroughness = val
}

// SetAverageVerifierFriendliness sets the value of AverageVerifierFriendliness.
func (s *ParticipantFeedbackV1DTO) SetAverageVerifierFriendliness(val OptFloat64) {
	s.AverageVerifierFriendliness = val
}

func (*ParticipantFeedbackV1DTO) getParticipantFeedbackByLoginRes() {}

// Participant logins.
// Ref: #/components/schemas/ParticipantLoginsV1DTO
type ParticipantLoginsV1DTO struct {
	// Array of participant logins.
	Participants []string `json:"participants"`
}

// GetParticipants returns the value of Participants.
func (s *ParticipantLoginsV1DTO) GetParticipants() []string {
	return s.Participants
}

// SetParticipants sets the value of Participants.
func (s *ParticipantLoginsV1DTO) SetParticipants(val []string) {
	s.Participants = val
}

func (*ParticipantLoginsV1DTO) getLoginsByProjectIdRes()         {}
func (*ParticipantLoginsV1DTO) getParticipantsByCampusIdRes()    {}
func (*ParticipantLoginsV1DTO) getParticipantsByCoalitionIdRes() {}

// Participant Points.
// Ref: #/components/schemas/ParticipantPointsV1DTO
type ParticipantPointsV1DTO struct {
	// Participant’s number of Peer Review Points.
	PeerReviewPoints int32 `json:"peerReviewPoints"`
	// Participant’s number of Code Review Points.
	CodeReviewPoints int32 `json:"codeReviewPoints"`
	// Participant’s number of coins.
	Coins int32 `json:"coins"`
}

// GetPeerReviewPoints returns the value of PeerReviewPoints.
func (s *ParticipantPointsV1DTO) GetPeerReviewPoints() int32 {
	return s.PeerReviewPoints
}

// GetCodeReviewPoints returns the value of CodeReviewPoints.
func (s *ParticipantPointsV1DTO) GetCodeReviewPoints() int32 {
	return s.CodeReviewPoints
}

// GetCoins returns the value of Coins.
func (s *ParticipantPointsV1DTO) GetCoins() int32 {
	return s.Coins
}

// SetPeerReviewPoints sets the value of PeerReviewPoints.
func (s *ParticipantPointsV1DTO) SetPeerReviewPoints(val int32) {
	s.PeerReviewPoints = val
}

// SetCodeReviewPoints sets the value of CodeReviewPoints.
func (s *ParticipantPointsV1DTO) SetCodeReviewPoints(val int32) {
	s.CodeReviewPoints = val
}

// SetCoins sets the value of Coins.
func (s *ParticipantPointsV1DTO) SetCoins(val int32) {
	s.Coins = val
}

func (*ParticipantPointsV1DTO) getPointsByLoginRes() {}

// Participant Project.
// Ref: #/components/schemas/ParticipantProjectV1DTO
type ParticipantProjectV1DTO struct {
	// Project ID.
	ID int64 `json:"id"`
	// Project name.
	Title string `json:"title"`
	// Project type.
	Type ParticipantProjectV1DTOType `json:"type"`
	// Project status.
	Status ParticipantProjectV1DTOStatus `json:"status"`
	// Final percentage of completion.
	FinalPercentage OptInt32 `json:"finalPercentage"`
	// Date and time of the last completion (UTC).
	CompletionDateTime OptDateTime `json:"completionDateTime"`
	// Team members of the last attempt.
	TeamMembers []TeamMemberV1DTO `json:"teamMembers"`
	// ID of the course where the project is located.
	CourseId OptInt64 `json:"courseId"`
}

// GetID returns the value of ID.
func (s *ParticipantProjectV1DTO) GetID() int64 {
	return s.ID
}

// GetTitle returns the value of Title.
func (s *ParticipantProjectV1DTO) GetTitle() string {
	return s.Title
}

// GetType returns the value of Type.
func (s *ParticipantProjectV1DTO) GetType() ParticipantProjectV1DTOType {
	return s.Type
}

// GetStatus returns the value of Status.
func (s *ParticipantProjectV1DTO) GetStatus() ParticipantProjectV1DTOStatus {
	return s.Status
}

// GetFinalPercentage returns the value of FinalPercentage.
func (s *ParticipantProjectV1DTO) GetFinalPercentage() OptInt32 {
	return s.FinalPercentage
}

// GetCompletionDateTime returns the value of CompletionDateTime.
func (s *ParticipantProjectV1DTO) GetCompletionDateTime() OptDateTime {
	return s.CompletionDateTime
}

// GetTeamMembers returns the value of TeamMembers.
func (s *ParticipantProjectV1DTO) GetTeamMembers() []TeamMemberV1DTO {
	return s.TeamMembers
}

// GetCourseId returns the value of CourseId.
func (s *ParticipantProjectV1DTO) GetCourseId() OptInt64 {
	return s.CourseId
}

// SetID sets the value of ID.
func (s *ParticipantProjectV1DTO) SetID(val int64) {
	s.ID = val
}

// SetTitle sets the value of Title.
func (s *ParticipantProjectV1DTO) SetTitle(val string) {
	s.Title = val
}

// SetType sets the value of Type.
func (s *ParticipantProjectV1DTO) SetType(val ParticipantProjectV1DTOType) {
	s.Type = val
}

// SetStatus sets the value of Status.
func (s *ParticipantProjectV1DTO) SetStatus(val ParticipantProjectV1DTOStatus) {
	s.Status = val
}

// SetFinalPercentage sets the value of FinalPercentage.
func (s *ParticipantProjectV1DTO) SetFinalPercentage(val OptInt32) {
	s.FinalPercentage = val
}

// SetCompletionDateTime sets the value of CompletionDateTime.
func (s *ParticipantProjectV1DTO) SetCompletionDateTime(val OptDateTime) {
	s.CompletionDateTime = val
}

// SetTeamMembers sets the value of TeamMembers.
func (s *ParticipantProjectV1DTO) SetTeamMembers(val []TeamMemberV1DTO) {
	s.TeamMembers = val
}

// SetCourseId sets the value of CourseId.
func (s *ParticipantProjectV1DTO) SetCourseId(val OptInt64) {
	s.CourseId = val
}

func (*ParticipantProjectV1DTO) getParticipantProjectByLoginAndProjectIdRes() {}

// Project status.
type ParticipantProjectV1DTOStatus string

const (
	ParticipantProjectV1DTOStatusASSIGNED   ParticipantProjectV1DTOStatus = "ASSIGNED"
	ParticipantProjectV1DTOStatusREGISTERED ParticipantProjectV1DTOStatus = "REGISTERED"
	ParticipantProjectV1DTOStatusINPROGRESS ParticipantProjectV1DTOStatus = "IN_PROGRESS"
	ParticipantProjectV1DTOStatusINREVIEWS  ParticipantProjectV1DTOStatus = "IN_REVIEWS"
	ParticipantProjectV1DTOStatusACCEPTED   ParticipantProjectV1DTOStatus = "ACCEPTED"
	ParticipantProjectV1DTOStatusFAILED     ParticipantProjectV1DTOStatus = "FAILED"
)

// AllValues returns all ParticipantProjectV1DTOStatus values.
func (ParticipantProjectV1DTOStatus) AllValues() []ParticipantProjectV1DTOStatus {
	return []ParticipantProjectV1DTOStatus{
		ParticipantProjectV1DTOStatusASSIGNED,
		ParticipantProjectV1DTOStatusREGISTERED,
		ParticipantProjectV1DTOStatusINPROGRESS,
		ParticipantProjectV1DTOStatusINREVIEWS,
		ParticipantProjectV1DTOStatusACCEPTED,
		ParticipantProjectV1DTOStatusFAILED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ParticipantProjectV1DTOStatus) MarshalText() ([]byte, error) {
	switch s {
	case ParticipantProjectV1DTOStatusASSIGNED:
		return []byte(s), nil
	case ParticipantProjectV1DTOStatusREGISTERED:
		return []byte(s), nil
	case ParticipantProjectV1DTOStatusINPROGRESS:
		return []byte(s), nil
	case ParticipantProjectV1DTOStatusINREVIEWS:
		return []byte(s), nil
	case ParticipantProjectV1DTOStatusACCEPTED:
		return []byte(s), nil
	case ParticipantProjectV1DTOStatusFAILED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ParticipantProjectV1DTOStatus) UnmarshalText(data []byte) error {
	switch ParticipantProjectV1DTOStatus(data) {
	case ParticipantProjectV1DTOStatusASSIGNED:
		*s = ParticipantProjectV1DTOStatusASSIGNED
		return nil
	case ParticipantProjectV1DTOStatusREGISTERED:
		*s = ParticipantProjectV1DTOStatusREGISTERED
		return nil
	case ParticipantProjectV1DTOStatusINPROGRESS:
		*s = ParticipantProjectV1DTOStatusINPROGRESS
		return nil
	case ParticipantProjectV1DTOStatusINREVIEWS:
		*s = ParticipantProjectV1DTOStatusINREVIEWS
		return nil
	case ParticipantProjectV1DTOStatusACCEPTED:
		*s = ParticipantProjectV1DTOStatusACCEPTED
		return nil
	case ParticipantProjectV1DTOStatusFAILED:
		*s = ParticipantProjectV1DTOStatusFAILED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Project type.
type ParticipantProjectV1DTOType string

const (
	ParticipantProjectV1DTOTypeINDIVIDUAL ParticipantProjectV1DTOType = "INDIVIDUAL"
	ParticipantProjectV1DTOTypeGROUP      ParticipantProjectV1DTOType = "GROUP"
	ParticipantProjectV1DTOTypeEXAM       ParticipantProjectV1DTOType = "EXAM"
	ParticipantProjectV1DTOTypeEXAMTEST   ParticipantProjectV1DTOType = "EXAM_TEST"
)

// AllValues returns all ParticipantProjectV1DTOType values.
func (ParticipantProjectV1DTOType) AllValues() []ParticipantProjectV1DTOType {
	return []ParticipantProjectV1DTOType{
		ParticipantProjectV1DTOTypeINDIVIDUAL,
		ParticipantProjectV1DTOTypeGROUP,
		ParticipantProjectV1DTOTypeEXAM,
		ParticipantProjectV1DTOTypeEXAMTEST,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ParticipantProjectV1DTOType) MarshalText() ([]byte, error) {
	switch s {
	case ParticipantProjectV1DTOTypeINDIVIDUAL:
		return []byte(s), nil
	case ParticipantProjectV1DTOTypeGROUP:
		return []byte(s), nil
	case ParticipantProjectV1DTOTypeEXAM:
		return []byte(s), nil
	case ParticipantProjectV1DTOTypeEXAMTEST:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ParticipantProjectV1DTOType) UnmarshalText(data []byte) error {
	switch ParticipantProjectV1DTOType(data) {
	case ParticipantProjectV1DTOTypeINDIVIDUAL:
		*s = ParticipantProjectV1DTOTypeINDIVIDUAL
		return nil
	case ParticipantProjectV1DTOTypeGROUP:
		*s = ParticipantProjectV1DTOTypeGROUP
		return nil
	case ParticipantProjectV1DTOTypeEXAM:
		*s = ParticipantProjectV1DTOTypeEXAM
		return nil
	case ParticipantProjectV1DTOTypeEXAMTEST:
		*s = ParticipantProjectV1DTOTypeEXAMTEST
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Participant Projects.
// Ref: #/components/schemas/ParticipantProjectsV1DTO
type ParticipantProjectsV1DTO struct {
	// Array of projects.
	Projects []ParticipantProjectV1DTO `json:"projects"`
}

// GetProjects returns the value of Projects.
func (s *ParticipantProjectsV1DTO) GetProjects() []ParticipantProjectV1DTO {
	return s.Projects
}

// SetProjects sets the value of Projects.
func (s *ParticipantProjectsV1DTO) SetProjects(val []ParticipantProjectV1DTO) {
	s.Projects = val
}

func (*ParticipantProjectsV1DTO) getParticipantProjectsByLoginRes() {}

// Participant Skill.
// Ref: #/components/schemas/ParticipantSkillV1DTO
type ParticipantSkillV1DTO struct {
	// Skill name.
	Name string `json:"name"`
	// Skill points.
	Points int32 `json:"points"`
}

// GetName returns the value of Name.
func (s *ParticipantSkillV1DTO) GetName() string {
	return s.Name
}

// GetPoints returns the value of Points.
func (s *ParticipantSkillV1DTO) GetPoints() int32 {
	return s.Points
}

// SetName sets the value of Name.
func (s *ParticipantSkillV1DTO) SetName(val string) {
	s.Name = val
}

// SetPoints sets the value of Points.
func (s *ParticipantSkillV1DTO) SetPoints(val int32) {
	s.Points = val
}

// Participant Skills.
// Ref: #/components/schemas/ParticipantSkillsV1DTO
type ParticipantSkillsV1DTO struct {
	// Array of skills.
	Skills []ParticipantSkillV1DTO `json:"skills"`
}

// GetSkills returns the value of Skills.
func (s *ParticipantSkillsV1DTO) GetSkills() []ParticipantSkillV1DTO {
	return s.Skills
}

// SetSkills sets the value of Skills.
func (s *ParticipantSkillsV1DTO) SetSkills(val []ParticipantSkillV1DTO) {
	s.Skills = val
}

func (*ParticipantSkillsV1DTO) getSoftSkillByLoginRes() {}

// Participant.
// Ref: #/components/schemas/ParticipantV1DTO
type ParticipantV1DTO struct {
	// Participant login.
	Login string `json:"login"`
	// Participant class name (wave).
	ClassName OptString `json:"className"`
	// Participant parallel name (edu form).
	ParallelName OptString `json:"parallelName"`
	// Experience points.
	ExpValue int64 `json:"expValue"`
	// Participant level.
	Level int32 `json:"level"`
	// Number of experience points to the next level.
	ExpToNextLevel int64                  `json:"expToNextLevel"`
	Campus         ParticipantCampusV1DTO `json:"campus"`
	// Participant status.
	Status ParticipantV1DTOStatus `json:"status"`
}

// GetLogin returns the value of Login.
func (s *ParticipantV1DTO) GetLogin() string {
	return s.Login
}

// GetClassName returns the value of ClassName.
func (s *ParticipantV1DTO) GetClassName() OptString {
	return s.ClassName
}

// GetParallelName returns the value of ParallelName.
func (s *ParticipantV1DTO) GetParallelName() OptString {
	return s.ParallelName
}

// GetExpValue returns the value of ExpValue.
func (s *ParticipantV1DTO) GetExpValue() int64 {
	return s.ExpValue
}

// GetLevel returns the value of Level.
func (s *ParticipantV1DTO) GetLevel() int32 {
	return s.Level
}

// GetExpToNextLevel returns the value of ExpToNextLevel.
func (s *ParticipantV1DTO) GetExpToNextLevel() int64 {
	return s.ExpToNextLevel
}

// GetCampus returns the value of Campus.
func (s *ParticipantV1DTO) GetCampus() ParticipantCampusV1DTO {
	return s.Campus
}

// GetStatus returns the value of Status.
func (s *ParticipantV1DTO) GetStatus() ParticipantV1DTOStatus {
	return s.Status
}

// SetLogin sets the value of Login.
func (s *ParticipantV1DTO) SetLogin(val string) {
	s.Login = val
}

// SetClassName sets the value of ClassName.
func (s *ParticipantV1DTO) SetClassName(val OptString) {
	s.ClassName = val
}

// SetParallelName sets the value of ParallelName.
func (s *ParticipantV1DTO) SetParallelName(val OptString) {
	s.ParallelName = val
}

// SetExpValue sets the value of ExpValue.
func (s *ParticipantV1DTO) SetExpValue(val int64) {
	s.ExpValue = val
}

// SetLevel sets the value of Level.
func (s *ParticipantV1DTO) SetLevel(val int32) {
	s.Level = val
}

// SetExpToNextLevel sets the value of ExpToNextLevel.
func (s *ParticipantV1DTO) SetExpToNextLevel(val int64) {
	s.ExpToNextLevel = val
}

// SetCampus sets the value of Campus.
func (s *ParticipantV1DTO) SetCampus(val ParticipantCampusV1DTO) {
	s.Campus = val
}

// SetStatus sets the value of Status.
func (s *ParticipantV1DTO) SetStatus(val ParticipantV1DTOStatus) {
	s.Status = val
}

func (*ParticipantV1DTO) getParticipantByLoginRes() {}

// Participant status.
type ParticipantV1DTOStatus string

const (
	ParticipantV1DTOStatusACTIVE            ParticipantV1DTOStatus = "ACTIVE"
	ParticipantV1DTOStatusTEMPORARYBLOCKING ParticipantV1DTOStatus = "TEMPORARY_BLOCKING"
	ParticipantV1DTOStatusEXPELLED          ParticipantV1DTOStatus = "EXPELLED"
	ParticipantV1DTOStatusBLOCKED           ParticipantV1DTOStatus = "BLOCKED"
	ParticipantV1DTOStatusFROZEN            ParticipantV1DTOStatus = "FROZEN"
)

// AllValues returns all ParticipantV1DTOStatus values.
func (ParticipantV1DTOStatus) AllValues() []ParticipantV1DTOStatus {
	return []ParticipantV1DTOStatus{
		ParticipantV1DTOStatusACTIVE,
		ParticipantV1DTOStatusTEMPORARYBLOCKING,
		ParticipantV1DTOStatusEXPELLED,
		ParticipantV1DTOStatusBLOCKED,
		ParticipantV1DTOStatusFROZEN,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ParticipantV1DTOStatus) MarshalText() ([]byte, error) {
	switch s {
	case ParticipantV1DTOStatusACTIVE:
		return []byte(s), nil
	case ParticipantV1DTOStatusTEMPORARYBLOCKING:
		return []byte(s), nil
	case ParticipantV1DTOStatusEXPELLED:
		return []byte(s), nil
	case ParticipantV1DTOStatusBLOCKED:
		return []byte(s), nil
	case ParticipantV1DTOStatusFROZEN:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ParticipantV1DTOStatus) UnmarshalText(data []byte) error {
	switch ParticipantV1DTOStatus(data) {
	case ParticipantV1DTOStatusACTIVE:
		*s = ParticipantV1DTOStatusACTIVE
		return nil
	case ParticipantV1DTOStatusTEMPORARYBLOCKING:
		*s = ParticipantV1DTOStatusTEMPORARYBLOCKING
		return nil
	case ParticipantV1DTOStatusEXPELLED:
		*s = ParticipantV1DTOStatusEXPELLED
		return nil
	case ParticipantV1DTOStatusBLOCKED:
		*s = ParticipantV1DTOStatusBLOCKED
		return nil
	case ParticipantV1DTOStatusFROZEN:
		*s = ParticipantV1DTOStatusFROZEN
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Participant Workstation.
// Ref: #/components/schemas/ParticipantWorkstationV1DTO
type ParticipantWorkstationV1DTO struct {
	// Cluster ID.
	ClusterId int64 `json:"clusterId"`
	// Cluster name.
	ClusterName string `json:"clusterName"`
	// Row of a workplace.
	Row string `json:"row"`
	// Number of a workplace.
	Number int32 `json:"number"`
}

// GetClusterId returns the value of ClusterId.
func (s *ParticipantWorkstationV1DTO) GetClusterId() int64 {
	return s.ClusterId
}

// GetClusterName returns the value of ClusterName.
func (s *ParticipantWorkstationV1DTO) GetClusterName() string {
	return s.ClusterName
}

// GetRow returns the value of Row.
func (s *ParticipantWorkstationV1DTO) GetRow() string {
	return s.Row
}

// GetNumber returns the value of Number.
func (s *ParticipantWorkstationV1DTO) GetNumber() int32 {
	return s.Number
}

// SetClusterId sets the value of ClusterId.
func (s *ParticipantWorkstationV1DTO) SetClusterId(val int64) {
	s.ClusterId = val
}

// SetClusterName sets the value of ClusterName.
func (s *ParticipantWorkstationV1DTO) SetClusterName(val string) {
	s.ClusterName = val
}

// SetRow sets the value of Row.
func (s *ParticipantWorkstationV1DTO) SetRow(val string) {
	s.Row = val
}

// SetNumber sets the value of Number.
func (s *ParticipantWorkstationV1DTO) SetNumber(val int32) {
	s.Number = val
}

func (*ParticipantWorkstationV1DTO) getParticipantWorkstationByLoginRes() {}

// Xp History Item.
// Ref: #/components/schemas/ParticipantXpHistoryItemV1DTO
type ParticipantXpHistoryItemV1DTO struct {
	// XP value.
	ExpValue int64 `json:"expValue"`
	// Date and time of XP accrual (UTC).
	AccrualDateTime time.Time `json:"accrualDateTime"`
}

// GetExpValue returns the value of ExpValue.
func (s *ParticipantXpHistoryItemV1DTO) GetExpValue() int64 {
	return s.ExpValue
}

// GetAccrualDateTime returns the value of AccrualDateTime.
func (s *ParticipantXpHistoryItemV1DTO) GetAccrualDateTime() time.Time {
	return s.AccrualDateTime
}

// SetExpValue sets the value of ExpValue.
func (s *ParticipantXpHistoryItemV1DTO) SetExpValue(val int64) {
	s.ExpValue = val
}

// SetAccrualDateTime sets the value of AccrualDateTime.
func (s *ParticipantXpHistoryItemV1DTO) SetAccrualDateTime(val time.Time) {
	s.AccrualDateTime = val
}

// Xp History.
// Ref: #/components/schemas/ParticipantXpHistoryV1DTO
type ParticipantXpHistoryV1DTO struct {
	// Array of xp history items.
	ExpHistory []ParticipantXpHistoryItemV1DTO `json:"expHistory"`
}

// GetExpHistory returns the value of ExpHistory.
func (s *ParticipantXpHistoryV1DTO) GetExpHistory() []ParticipantXpHistoryItemV1DTO {
	return s.ExpHistory
}

// SetExpHistory sets the value of ExpHistory.
func (s *ParticipantXpHistoryV1DTO) SetExpHistory(val []ParticipantXpHistoryItemV1DTO) {
	s.ExpHistory = val
}

func (*ParticipantXpHistoryV1DTO) getXpHistoryByLoginRes() {}

// Project.
// Ref: #/components/schemas/ProjectV1DTO
type ProjectV1DTO struct {
	// Project ID.
	ProjectId int64 `json:"projectId"`
	// Project name.
	Title string `json:"title"`
	// Project description.
	Description string `json:"description"`
	// Project duration (in hours).
	DurationHours int32 `json:"durationHours"`
	// XP per Project.
	Xp OptInt32 `json:"xp"`
	// Project type.
	Type ProjectV1DTOType `json:"type"`
	// Array of condition group objects.
	StartConditions []ConditionRuleGroupV1DTO `json:"startConditions"`
	// Course ID.
	CourseId OptInt64 `json:"courseId"`
}

// GetProjectId returns the value of ProjectId.
func (s *ProjectV1DTO) GetProjectId() int64 {
	return s.ProjectId
}

// GetTitle returns the value of Title.
func (s *ProjectV1DTO) GetTitle() string {
	return s.Title
}

// GetDescription returns the value of Description.
func (s *ProjectV1DTO) GetDescription() string {
	return s.Description
}

// GetDurationHours returns the value of DurationHours.
func (s *ProjectV1DTO) GetDurationHours() int32 {
	return s.DurationHours
}

// GetXp returns the value of Xp.
func (s *ProjectV1DTO) GetXp() OptInt32 {
	return s.Xp
}

// GetType returns the value of Type.
func (s *ProjectV1DTO) GetType() ProjectV1DTOType {
	return s.Type
}

// GetStartConditions returns the value of StartConditions.
func (s *ProjectV1DTO) GetStartConditions() []ConditionRuleGroupV1DTO {
	return s.StartConditions
}

// GetCourseId returns the value of CourseId.
func (s *ProjectV1DTO) GetCourseId() OptInt64 {
	return s.CourseId
}

// SetProjectId sets the value of ProjectId.
func (s *ProjectV1DTO) SetProjectId(val int64) {
	s.ProjectId = val
}

// SetTitle sets the value of Title.
func (s *ProjectV1DTO) SetTitle(val string) {
	s.Title = val
}

// SetDescription sets the value of Description.
func (s *ProjectV1DTO) SetDescription(val string) {
	s.Description = val
}

// SetDurationHours sets the value of DurationHours.
func (s *ProjectV1DTO) SetDurationHours(val int32) {
	s.DurationHours = val
}

// SetXp sets the value of Xp.
func (s *ProjectV1DTO) SetXp(val OptInt32) {
	s.Xp = val
}

// SetType sets the value of Type.
func (s *ProjectV1DTO) SetType(val ProjectV1DTOType) {
	s.Type = val
}

// SetStartConditions sets the value of StartConditions.
func (s *ProjectV1DTO) SetStartConditions(val []ConditionRuleGroupV1DTO) {
	s.StartConditions = val
}

// SetCourseId sets the value of CourseId.
func (s *ProjectV1DTO) SetCourseId(val OptInt64) {
	s.CourseId = val
}

func (*ProjectV1DTO) getProjectByProjectIdRes() {}

// Project type.
type ProjectV1DTOType string

const (
	ProjectV1DTOTypeINDIVIDUAL ProjectV1DTOType = "INDIVIDUAL"
	ProjectV1DTOTypeGROUP      ProjectV1DTOType = "GROUP"
	ProjectV1DTOTypeEXAM       ProjectV1DTOType = "EXAM"
	ProjectV1DTOTypeEXAMTEST   ProjectV1DTOType = "EXAM_TEST"
)

// AllValues returns all ProjectV1DTOType values.
func (ProjectV1DTOType) AllValues() []ProjectV1DTOType {
	return []ProjectV1DTOType{
		ProjectV1DTOTypeINDIVIDUAL,
		ProjectV1DTOTypeGROUP,
		ProjectV1DTOTypeEXAM,
		ProjectV1DTOTypeEXAMTEST,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ProjectV1DTOType) MarshalText() ([]byte, error) {
	switch s {
	case ProjectV1DTOTypeINDIVIDUAL:
		return []byte(s), nil
	case ProjectV1DTOTypeGROUP:
		return []byte(s), nil
	case ProjectV1DTOTypeEXAM:
		return []byte(s), nil
	case ProjectV1DTOTypeEXAMTEST:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ProjectV1DTOType) UnmarshalText(data []byte) error {
	switch ProjectV1DTOType(data) {
	case ProjectV1DTOTypeINDIVIDUAL:
		*s = ProjectV1DTOTypeINDIVIDUAL
		return nil
	case ProjectV1DTOTypeGROUP:
		*s = ProjectV1DTOTypeGROUP
		return nil
	case ProjectV1DTOTypeEXAM:
		*s = ProjectV1DTOTypeEXAM
		return nil
	case ProjectV1DTOTypeEXAMTEST:
		*s = ProjectV1DTOTypeEXAMTEST
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Sale.
// Ref: #/components/schemas/SaleV1DTO
type SaleV1DTO struct {
	// Type of review points.
	Type SaleV1DTOType `json:"type"`
	// Sale status.
	Status SaleV1DTOStatus `json:"status"`
	// Date and time of the sale start (UTC).
	StartDateTime OptDateTime `json:"startDateTime"`
	// Percentage of sale progress.
	ProgressPercentage OptInt32 `json:"progressPercentage"`
}

// GetType returns the value of Type.
func (s *SaleV1DTO) GetType() SaleV1DTOType {
	return s.Type
}

// GetStatus returns the value of Status.
func (s *SaleV1DTO) GetStatus() SaleV1DTOStatus {
	return s.Status
}

// GetStartDateTime returns the value of StartDateTime.
func (s *SaleV1DTO) GetStartDateTime() OptDateTime {
	return s.StartDateTime
}

// GetProgressPercentage returns the value of ProgressPercentage.
func (s *SaleV1DTO) GetProgressPercentage() OptInt32 {
	return s.ProgressPercentage
}

// SetType sets the value of Type.
func (s *SaleV1DTO) SetType(val SaleV1DTOType) {
	s.Type = val
}

// SetStatus sets the value of Status.
func (s *SaleV1DTO) SetStatus(val SaleV1DTOStatus) {
	s.Status = val
}

// SetStartDateTime sets the value of StartDateTime.
func (s *SaleV1DTO) SetStartDateTime(val OptDateTime) {
	s.StartDateTime = val
}

// SetProgressPercentage sets the value of ProgressPercentage.
func (s *SaleV1DTO) SetProgressPercentage(val OptInt32) {
	s.ProgressPercentage = val
}

// Sale status.
type SaleV1DTOStatus string

const (
	SaleV1DTOStatusNONACTIVE SaleV1DTOStatus = "NON_ACTIVE"
	SaleV1DTOStatusACTIVE    SaleV1DTOStatus = "ACTIVE"
	SaleV1DTOStatusPLANNED   SaleV1DTOStatus = "PLANNED"
)

// AllValues returns all SaleV1DTOStatus values.
func (SaleV1DTOStatus) AllValues() []SaleV1DTOStatus {
	return []SaleV1DTOStatus{
		SaleV1DTOStatusNONACTIVE,
		SaleV1DTOStatusACTIVE,
		SaleV1DTOStatusPLANNED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SaleV1DTOStatus) MarshalText() ([]byte, error) {
	switch s {
	case SaleV1DTOStatusNONACTIVE:
		return []byte(s), nil
	case SaleV1DTOStatusACTIVE:
		return []byte(s), nil
	case SaleV1DTOStatusPLANNED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SaleV1DTOStatus) UnmarshalText(data []byte) error {
	switch SaleV1DTOStatus(data) {
	case SaleV1DTOStatusNONACTIVE:
		*s = SaleV1DTOStatusNONACTIVE
		return nil
	case SaleV1DTOStatusACTIVE:
		*s = SaleV1DTOStatusACTIVE
		return nil
	case SaleV1DTOStatusPLANNED:
		*s = SaleV1DTOStatusPLANNED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Type of review points.
type SaleV1DTOType string

const (
	SaleV1DTOTypePRP SaleV1DTOType = "PRP"
	SaleV1DTOTypeCRP SaleV1DTOType = "CRP"
)

// AllValues returns all SaleV1DTOType values.
func (SaleV1DTOType) AllValues() []SaleV1DTOType {
	return []SaleV1DTOType{
		SaleV1DTOTypePRP,
		SaleV1DTOTypeCRP,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SaleV1DTOType) MarshalText() ([]byte, error) {
	switch s {
	case SaleV1DTOTypePRP:
		return []byte(s), nil
	case SaleV1DTOTypeCRP:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SaleV1DTOType) UnmarshalText(data []byte) error {
	switch SaleV1DTOType(data) {
	case SaleV1DTOTypePRP:
		*s = SaleV1DTOTypePRP
		return nil
	case SaleV1DTOTypeCRP:
		*s = SaleV1DTOTypeCRP
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Sales.
// Ref: #/components/schemas/SalesV1DTO
type SalesV1DTO struct {
	// Array of sales data.
	Sales []SaleV1DTO `json:"sales"`
}

// GetSales returns the value of Sales.
func (s *SalesV1DTO) GetSales() []SaleV1DTO {
	return s.Sales
}

// SetSales sets the value of Sales.
func (s *SalesV1DTO) SetSales(val []SaleV1DTO) {
	s.Sales = val
}

func (*SalesV1DTO) getSalesRes() {}

// Team Member.
// Ref: #/components/schemas/TeamMemberV1DTO
type TeamMemberV1DTO struct {
	// Team member login.
	Login string `json:"login"`
	// Team member role.
	IsTeamlead bool `json:"isTeamlead"`
}

// GetLogin returns the value of Login.
func (s *TeamMemberV1DTO) GetLogin() string {
	return s.Login
}

// GetIsTeamlead returns the value of IsTeamlead.
func (s *TeamMemberV1DTO) GetIsTeamlead() bool {
	return s.IsTeamlead
}

// SetLogin sets the value of Login.
func (s *TeamMemberV1DTO) SetLogin(val string) {
	s.Login = val
}

// SetIsTeamlead sets the value of IsTeamlead.
func (s *TeamMemberV1DTO) SetIsTeamlead(val bool) {
	s.IsTeamlead = val
}

// Workplace.
// Ref: #/components/schemas/WorkplaceV1DTO
type WorkplaceV1DTO struct {
	// Row of a workplace.
	Row string `json:"row"`
	// Number of a workplace.
	Number int32 `json:"number"`
	// Login of the participant occupying the place.
	Login OptString `json:"login"`
}

// GetRow returns the value of Row.
func (s *WorkplaceV1DTO) GetRow() string {
	return s.Row
}

// GetNumber returns the value of Number.
func (s *WorkplaceV1DTO) GetNumber() int32 {
	return s.Number
}

// GetLogin returns the value of Login.
func (s *WorkplaceV1DTO) GetLogin() OptString {
	return s.Login
}

// SetRow sets the value of Row.
func (s *WorkplaceV1DTO) SetRow(val string) {
	s.Row = val
}

// SetNumber sets the value of Number.
func (s *WorkplaceV1DTO) SetNumber(val int32) {
	s.Number = val
}

// SetLogin sets the value of Login.
func (s *WorkplaceV1DTO) SetLogin(val OptString) {
	s.Login = val
}
