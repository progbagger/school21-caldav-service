// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// GetBadgesByLogin implements getBadgesByLogin operation.
	//
	// Returns a list of participant badges by login.
	//
	// GET /v1/participants/{login}/badges
	GetBadgesByLogin(ctx context.Context, params GetBadgesByLoginParams) (GetBadgesByLoginRes, error)
	// GetCampuses implements getCampuses operation.
	//
	// Returns a list of campuses.
	//
	// GET /v1/campuses
	GetCampuses(ctx context.Context) (GetCampusesRes, error)
	// GetClustersByCampus implements getClustersByCampus operation.
	//
	// Returns a list of clusters in a campus by ID.
	//
	// GET /v1/campuses/{campusId}/clusters
	GetClustersByCampus(ctx context.Context, params GetClustersByCampusParams) (GetClustersByCampusRes, error)
	// GetCoalitionByLogin implements getCoalitionByLogin operation.
	//
	// Returns participant coalition information by login.
	//
	// GET /v1/participants/{login}/coalition
	GetCoalitionByLogin(ctx context.Context, params GetCoalitionByLoginParams) (GetCoalitionByLoginRes, error)
	// GetCoalitionsByCampus implements getCoalitionsByCampus operation.
	//
	// Returns a list of coalitions in a campus by ID.
	//
	// GET /v1/campuses/{campusId}/coalitions
	GetCoalitionsByCampus(ctx context.Context, params GetCoalitionsByCampusParams) (GetCoalitionsByCampusRes, error)
	// GetCourseByCourseId implements getCourseByCourseId operation.
	//
	// Returns course information by ID.
	//
	// GET /v1/courses/{courseId}
	GetCourseByCourseId(ctx context.Context, params GetCourseByCourseIdParams) (GetCourseByCourseIdRes, error)
	// GetEvents implements getEvents operation.
	//
	// Returns a list of events.
	//
	// GET /v1/events
	GetEvents(ctx context.Context, params GetEventsParams) (GetEventsRes, error)
	// GetGraph implements getGraph operation.
	//
	// Returns a participant projects map.
	//
	// GET /v1/graph
	GetGraph(ctx context.Context) (GetGraphRes, error)
	// GetLogWeeklyAvgHoursByLoginAndDate implements getLogWeeklyAvgHoursByLoginAndDate operation.
	//
	// Returns an average week logtime by login.
	//
	// GET /v1/participants/{login}/logtime
	GetLogWeeklyAvgHoursByLoginAndDate(ctx context.Context, params GetLogWeeklyAvgHoursByLoginAndDateParams) (GetLogWeeklyAvgHoursByLoginAndDateRes, error)
	// GetLoginsByProjectId implements getLoginsByProjectId operation.
	//
	// Returns a list of participants by project ID.
	//
	// GET /v1/projects/{projectId}/participants
	GetLoginsByProjectId(ctx context.Context, params GetLoginsByProjectIdParams) (GetLoginsByProjectIdRes, error)
	// GetParticipantByLogin implements getParticipantByLogin operation.
	//
	// Returns basic participant information by login.
	//
	// GET /v1/participants/{login}
	GetParticipantByLogin(ctx context.Context, params GetParticipantByLoginParams) (GetParticipantByLoginRes, error)
	// GetParticipantCourseByLoginAndCourseId implements getParticipantCourseByLoginAndCourseId operation.
	//
	// Returns participant course information by ID.
	//
	// GET /v1/participants/{login}/courses/{courseId}
	GetParticipantCourseByLoginAndCourseId(ctx context.Context, params GetParticipantCourseByLoginAndCourseIdParams) (GetParticipantCourseByLoginAndCourseIdRes, error)
	// GetParticipantCoursesByLogin implements getParticipantCoursesByLogin operation.
	//
	// Returns participant courses information by login.
	//
	// GET /v1/participants/{login}/courses
	GetParticipantCoursesByLogin(ctx context.Context, params GetParticipantCoursesByLoginParams) (GetParticipantCoursesByLoginRes, error)
	// GetParticipantFeedbackByLogin implements getParticipantFeedbackByLogin operation.
	//
	// Returns average participant feedback points by login.
	//
	// GET /v1/participants/{login}/feedback
	GetParticipantFeedbackByLogin(ctx context.Context, params GetParticipantFeedbackByLoginParams) (GetParticipantFeedbackByLoginRes, error)
	// GetParticipantProjectByLoginAndProjectId implements getParticipantProjectByLoginAndProjectId operation.
	//
	// Returns participant project information by ID.
	//
	// GET /v1/participants/{login}/projects/{projectId}
	GetParticipantProjectByLoginAndProjectId(ctx context.Context, params GetParticipantProjectByLoginAndProjectIdParams) (GetParticipantProjectByLoginAndProjectIdRes, error)
	// GetParticipantProjectsByLogin implements getParticipantProjectsByLogin operation.
	//
	// Returns participant projects information by login.
	//
	// GET /v1/participants/{login}/projects
	GetParticipantProjectsByLogin(ctx context.Context, params GetParticipantProjectsByLoginParams) (GetParticipantProjectsByLoginRes, error)
	// GetParticipantWorkstationByLogin implements getParticipantWorkstationByLogin operation.
	//
	// Returns a participant workstation by login.
	//
	// GET /v1/participants/{login}/workstation
	GetParticipantWorkstationByLogin(ctx context.Context, params GetParticipantWorkstationByLoginParams) (GetParticipantWorkstationByLoginRes, error)
	// GetParticipantsByCampusId implements getParticipantsByCampusId operation.
	//
	// Returns a list of participants in a campus by ID.
	//
	// GET /v1/campuses/{campusId}/participants
	GetParticipantsByCampusId(ctx context.Context, params GetParticipantsByCampusIdParams) (GetParticipantsByCampusIdRes, error)
	// GetParticipantsByCoalitionId implements getParticipantsByCoalitionId operation.
	//
	// Returns a list of participants in a coalition by ID.
	//
	// GET /v1/coalitions/{coalitionId}/participants
	GetParticipantsByCoalitionId(ctx context.Context, params GetParticipantsByCoalitionIdParams) (GetParticipantsByCoalitionIdRes, error)
	// GetParticipantsByCoalitionId1 implements getParticipantsByCoalitionId_1 operation.
	//
	// Returns a cluster map.
	//
	// GET /v1/clusters/{clusterId}/map
	GetParticipantsByCoalitionId1(ctx context.Context, params GetParticipantsByCoalitionId1Params) (GetParticipantsByCoalitionId1Res, error)
	// GetPointsByLogin implements getPointsByLogin operation.
	//
	// Returns participant points information by login.
	//
	// GET /v1/participants/{login}/points
	GetPointsByLogin(ctx context.Context, params GetPointsByLoginParams) (GetPointsByLoginRes, error)
	// GetProjectByProjectId implements getProjectByProjectId operation.
	//
	// Returns project information by ID.
	//
	// GET /v1/projects/{projectId}
	GetProjectByProjectId(ctx context.Context, params GetProjectByProjectIdParams) (GetProjectByProjectIdRes, error)
	// GetSales implements getSales operation.
	//
	// Returns current salesâ€™ statuses within parallel.
	//
	// GET /v1/sales
	GetSales(ctx context.Context) (GetSalesRes, error)
	// GetSoftSkillByLogin implements getSoftSkillByLogin operation.
	//
	// Returns participant skill points by login.
	//
	// GET /v1/participants/{login}/skills
	GetSoftSkillByLogin(ctx context.Context, params GetSoftSkillByLoginParams) (GetSoftSkillByLoginRes, error)
	// GetXpHistoryByLogin implements getXpHistoryByLogin operation.
	//
	// Returns a list of participant XP accruals by login.
	//
	// GET /v1/participants/{login}/experience-history
	GetXpHistoryByLogin(ctx context.Context, params GetXpHistoryByLoginParams) (GetXpHistoryByLoginRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
